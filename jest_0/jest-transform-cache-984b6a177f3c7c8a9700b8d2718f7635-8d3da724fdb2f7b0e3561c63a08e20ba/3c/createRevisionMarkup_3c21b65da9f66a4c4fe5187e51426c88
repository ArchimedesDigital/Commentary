/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var createRevisionMarkup = function createRevisionMarkup(html) {
	var newHtml = html;

	var workNamesSpace = [{
		title: 'Iliad',
		slug: 'iliad' },
	{
		title: 'Odyssey',
		slug: 'odyssey' },
	{
		title: 'Homeric Hymns',
		slug: 'hymns' },
	{
		title: 'Hymns',
		slug: 'hymns' }];

	var workNamesPeriod = [{
		title: 'Il',
		slug: 'iliad' },
	{
		title: 'Od',
		slug: 'odyssey' },
	{
		title: 'HH',
		slug: 'hymns' },
	{
		title: 'I',
		slug: 'iliad' },
	{
		title: 'O',
		slug: 'odyssey' }];


	var regex1 = /* istanbul ignore next */void 0;
	var regex2 = /* istanbul ignore next */void 0;

	workNamesSpace.forEach(function (workName) {
		// regex for range with dash (lookahead to ignore if surrounded by &quot; - required for comment cross reference)
		regex1 = new RegExp( /* istanbul ignore next */workName.title + ' (\\d+).(\\d+)[\\-\\\u2013\\\u2014](\\d+)(?!.*&quot;)', 'g');

		// regex for no range (and lookahead to ensure range isn't captured) (lookahead to ignore if surrounded by &quot; - required for comment cross reference)
		regex2 = new RegExp( /* istanbul ignore next */workName.title + ' (\\d+).(?!\\d+[\\-\\\u2013\\\u2014]\\d+)(\\d+)(?!.*&quot;)', 'g');

		newHtml = newHtml.replace(regex1, /* istanbul ignore next */'<a\n\t\t\t\tclass=\'has-lemma-reference\'\n\t\t\t\tdata-work=' +


		workName.slug + '\n\t\t\t\tdata-subwork=\'$1\'\n\t\t\t\tdata-lineFrom=\'$2\'\n\t\t\t\tdata-lineTo=\'$3\'\n\t\t\t>' +



		workName.title + ' $1.$2-$3</a>');
		newHtml = newHtml.replace(regex2, /* istanbul ignore next */'<a\n\t\t\t\tclass=\'has-lemma-reference\'\n\t\t\t\tdata-work=' +


		workName.slug + '\n\t\t\t\tdata-subwork=\'$1\'\n\t\t\t\tdata-lineFrom=\'$2\'\n\t\t\t>' +


		workName.title + ' $1.$2</a>');
	});

	workNamesPeriod.forEach(function (workName) {
		// regex for range with dash (lookahead to ignore if surrounded by &quot; - required for comment cross reference)
		regex1 = new RegExp( /* istanbul ignore next */'([^\\w+])' + workName.title + '.(\\s*)(\\d+).(\\d+)[\\-\\\u2013\\\u2014](\\d+)(?!.*&quot;)', 'g');

		// regex for no range (and lookahead to ensure range isn't captured) (lookahead to ignore if surrounded by &quot; - required for comment cross reference)
		regex2 = new RegExp( /* istanbul ignore next */'([^\\w+])' + workName.title + '.(\\s*)(\\d+).(?!\\d+[\\-\\\u2013\\\u2014]\\d+)(\\d+)(?!.*&quot;)', 'g');
		newHtml = newHtml.replace(regex1, /* istanbul ignore next */'$1<a\n\t\t\t\tclass=\'has-lemma-reference\'\n\t\t\t\tdata-work=' +


		workName.slug + '\n\t\t\t\tdata-subwork=\'$3\'\n\t\t\t\tdata-lineFrom=\'$4\'\n\t\t\t\tdata-lineTo=\'$5\'\n\t\t\t>' +



		workName.title + '.$2$3.$4-$5</a>');
		newHtml = newHtml.replace(regex2, /* istanbul ignore next */'$1<a\n\t\t\t\tclass=\'has-lemma-reference\'\n\t\t\t\tdata-work=' +


		workName.slug + '\n\t\t\t\tdata-subwork=\'$3\'\n\t\t\t\tdata-lineFrom=\'$4\'\n\t\t\t>' +


		workName.title + '.$2$3.$4</a>');
	});

	return { __html: newHtml };
}; /* istanbul ignore next */exports.default =

createRevisionMarkup;