/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_session = require('meteor/session');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');


var /* istanbul ignore next */_referenceWorks = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/referenceWorks'); /* istanbul ignore next */var _referenceWorks2 = _interopRequireDefault(_referenceWorks);


var /* istanbul ignore next */_CommentUpper = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/comments/CommentUpper'); /* istanbul ignore next */var _CommentUpper2 = _interopRequireDefault(_CommentUpper);
var /* istanbul ignore next */_CommentKeywordsContainer = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/comments/CommentKeywordsContainer'); /* istanbul ignore next */var _CommentKeywordsContainer2 = _interopRequireDefault(_CommentKeywordsContainer);
var /* istanbul ignore next */_CommentLower = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/comments/CommentLower'); /* istanbul ignore next */var _CommentLower2 = _interopRequireDefault(_CommentLower);
var /* istanbul ignore next */_CommentRevisionSelect = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/comments/CommentRevisionSelect'); /* istanbul ignore next */var _CommentRevisionSelect2 = _interopRequireDefault(_CommentRevisionSelect);
var /* istanbul ignore next */_DiscussionThread = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/discussionComments/DiscussionThread'); /* istanbul ignore next */var _DiscussionThread2 = _interopRequireDefault(_DiscussionThread);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // api:
// components:

/*
	helpers
*/
var getUpdateDate = function getUpdateDate(selectedRevision) {
	var updated = selectedRevision.created;
	if (selectedRevision.originalDate) {
		updated = selectedRevision.originalDate;
	} else if (selectedRevision.updated) {
		updated = selectedRevision.originalDate;
	}
	return moment(updated).format('D MMMM YYYY');
};

var getUserCanEditCommenters = function getUserCanEditCommenters() {
	if ( /* istanbul ignore next */_meteor.Meteor.user() && /* istanbul ignore next */_meteor.Meteor.user().canEditCommenters) {
		return (/* istanbul ignore next */_meteor.Meteor.user().canEditCommenters);
	}
	return [];
};

var getCommentClass = function getCommentClass(discussionVisible) {
	var commentClass = 'comment-outer has-discussion ';
	if (discussionVisible) {
		commentClass += 'discussion--width discussion--visible';
	}
	return commentClass;
};


/*
   	BEGIN CommentDetail
   */ /* istanbul ignore next */var
CommentDetail = function (_React$Component) {_inherits(CommentDetail, _React$Component);
















































	function /* istanbul ignore next */CommentDetail(props) {/* istanbul ignore next */_classCallCheck(this, CommentDetail);var _this = _possibleConstructorReturn(this, (CommentDetail.__proto__ || Object.getPrototypeOf(CommentDetail)).call(this,
		props));

		/* istanbul ignore next */_this.state = {
			selectedRevisionIndex: null,
			discussionVisible: false,
			lemmaReferenceModalVisible: false,
			keywordReferenceModalVisible: false,
			referenceTop: 0,
			referenceLeft: 0,
			lemmaReferenceWork: 'iliad',
			lemmaReferenceSubwork: 0,
			lemmaReferenceLineFrom: 0,
			lemmaReferenceLineTo: null,
			keyword: '',
			persistentIdentifierModalVisible: false,
			persistentIdentifierModalTop: 0,
			persistentIdentifierModalLeft: 0 };


		// methods:
		/* istanbul ignore next */_this.getRevisionIndex = /* istanbul ignore next */_this.getRevisionIndex.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.addSearchTerm = /* istanbul ignore next */_this.addSearchTerm.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.showDiscussionThread = /* istanbul ignore next */_this.showDiscussionThread.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.hideDiscussionThread = /* istanbul ignore next */_this.hideDiscussionThread.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.checkIfToggleReferenceModal = /* istanbul ignore next */_this.checkIfToggleReferenceModal.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.closeLemmaReference = /* istanbul ignore next */_this.closeLemmaReference.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.closeKeywordReference = /* istanbul ignore next */_this.closeKeywordReference.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.selectRevision = /* istanbul ignore next */_this.selectRevision.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;

	}_createClass(CommentDetail, [{ key: 'getRevisionIndex', value: function getRevisionIndex()

		{/* istanbul ignore next */var _props =
			this.props,comment = _props.comment,filters = _props.filters;
			var selectedRevisionIndex = this.state.selectedRevisionIndex;
			if (selectedRevisionIndex === null) {
				var foundRevision = null;
				filters.forEach(function (filter) {
					if (filter.key === 'revision') {
						foundRevision = filter.values[0];
					}
				});

				if (foundRevision != null && foundRevision >= 0 &&
				foundRevision < comment.revisions.length) {
					selectedRevisionIndex = foundRevision;
				} else {
					selectedRevisionIndex = comment.revisions.length - 1;
				}
			}
			return selectedRevisionIndex;
		} }, { key: 'addSearchTerm', value: function addSearchTerm(

		keyword) {
			if (!('isOnHomeView' in this.props) || this.props.isOnHomeView === false) {
				this.props.toggleSearchTerm('keywords', keyword);
			} else {
				FlowRouter.go('/commentary/', {}, { keywords: keyword.slug });
			}
		} }, { key: 'showDiscussionThread', value: function showDiscussionThread()

		{
			this.setState({
				discussionVisible: true });

		} }, { key: 'hideDiscussionThread', value: function hideDiscussionThread()

		{
			this.setState({
				discussionVisible: false });

		} }, { key: 'checkIfToggleReferenceModal', value: function checkIfToggleReferenceModal(

		e) {
			var $target = $(e.target);
			var upperOffset = 90;
			var lineFrom = 0;
			var lineTo = 0;
			var subwork = 0;

			if ($target.hasClass('has-lemma-reference')) {
				subwork = parseInt($target.data().subwork, 10);
				lineFrom = parseInt($target.data().linefrom, 10);
				lineTo = parseInt($target.data().lineto, 10);

				if (lineTo) {
					upperOffset += (lineTo - lineFrom) * 60;
					if (upperOffset > 260) {
						upperOffset = 260;
					}
				}

				this.setState({
					lemmaReferenceModalVisible: true,
					lemmaReferenceWork: $target.data().work,
					lemmaReferenceSubwork: subwork,
					lemmaReferenceLineFrom: lineFrom,
					lemmaReferenceLineTo: lineTo,
					lemmaReferenceTop: $target.position().top - upperOffset,
					lemmaReferenceLeft: $target.position().left + 160 });

			} else if ($target.hasClass('keyword-gloss')) {
				var keyword = $target.data().link.replace('/keywords/', '');
				this.setState({
					keywordReferenceModalVisible: true,
					keywordReferenceTop: $target.position().top - upperOffset,
					keywordReferenceLeft: $target.position().left + 160,
					keyword: keyword });

			}
		} }, { key: 'closeLemmaReference', value: function closeLemmaReference()

		{
			this.setState({
				lemmaReferenceModalVisible: false,
				lemmaReferenceWork: 'iliad',
				lemmaReferenceSubwork: 0,
				lemmaReferenceLineFrom: 0,
				lemmaReferenceLineTo: null,
				lemmaReferenceTop: 0,
				lemmaReferenceLeft: 0 });

		} }, { key: 'closeKeywordReference', value: function closeKeywordReference()

		{
			this.setState({
				keywordReferenceModalVisible: false,
				keywordReferenceTop: 0,
				keywordReferenceLeft: 0,
				keyword: '' });

		} }, { key: 'selectRevision', value: function selectRevision(

		event) {
			this.setState({
				selectedRevisionIndex: parseInt(event.currentTarget.id, 10) });

		} }, { key: 'render', value: function render()

		{/* istanbul ignore next */var _props2 =

			this.props,comment = _props2.comment,referenceWorks = _props2.referenceWorks,ready = _props2.ready; /* istanbul ignore next */var
			discussionVisible = this.state.discussionVisible;

			if (!ready) {
				return null;
			}

			var selectedRevisionIndex = this.getRevisionIndex();
			var selectedRevision = comment.revisions[selectedRevisionIndex];

			var commentClass = getCommentClass(discussionVisible);

			return (
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: commentClass },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'article', /* istanbul ignore next */{
							className: 'comment commentary-comment paper-shadow',
							/* istanbul ignore next */'data-id': comment._id },


						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentUpper2.default, /* istanbul ignore next */{
							title: selectedRevision.title,
							commentId: comment._id,
							commenters: comment.commenters,
							updateDate: getUpdateDate(selectedRevision),
							userCanEditCommenters: getUserCanEditCommenters() }),


						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentKeywordsContainer2.default, /* istanbul ignore next */{
							keywords: comment.keywords,
							keywordOnClick: this.addSearchTerm }),


						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentLower2.default, /* istanbul ignore next */{
							comment: comment,
							revisionIndex: selectedRevisionIndex,
							onTextClick: this.checkIfToggleReferenceModal,
							referenceWorks: referenceWorks }),


						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentRevisionSelect2.default, /* istanbul ignore next */{
							commentId: comment._id,
							revisions: comment.revisions,
							selectedRevisionIndex: selectedRevisionIndex,
							selectRevision: this.selectRevision })),




					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DiscussionThread2.default, /* istanbul ignore next */{
						comment: comment,
						showDiscussionThread: this.showDiscussionThread,
						hideDiscussionThread: this.hideDiscussionThread,
						discussionVisible: this.state.discussionVisible,
						toggleLemma: this.props.toggleLemma,
						showLoginModal: this.props.showLoginModal }),


					this.state.lemmaReferenceModalVisible ?
					/* istanbul ignore next */_react2.default.createElement(LemmaReferenceModal, /* istanbul ignore next */{
						visible: this.state.lemmaReferenceModalVisible,
						top: this.state.lemmaReferenceTop,
						left: this.state.lemmaReferenceLeft,
						work: this.state.lemmaReferenceWork,
						subwork: this.state.lemmaReferenceSubwork,
						lineFrom: this.state.lemmaReferenceLineFrom,
						lineTo: this.state.lemmaReferenceLineTo,
						closeLemmaReference: this.closeLemmaReference }) :

					'',

					this.state.keywordReferenceModalVisible ?
					/* istanbul ignore next */_react2.default.createElement(KeywordReferenceModal, /* istanbul ignore next */{
						visible: this.state.keywordReferenceModalVisible,
						top: this.state.keywordReferenceTop,
						left: this.state.keywordReferenceLeft,
						keyword: this.state.keyword,
						close: this.closeKeywordReference }) :

					''));


		} }]);return CommentDetail;}( /* istanbul ignore next */_react2.default.Component);


/*
                                                                                      	END CommentDetail
                                                                                      */ /* istanbul ignore next */CommentDetail.propTypes = { comment: /* istanbul ignore next */_react2.default.PropTypes.shape({ _id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, commenters: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({ _id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, slug: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, avatar: /* istanbul ignore next */_react2.default.PropTypes.shape({ src: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired }) })), referenceWorks: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({ text: /* istanbul ignore next */_react2.default.PropTypes.string, referenceWorkId: /* istanbul ignore next */_react2.default.PropTypes.string })), revisions: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({ _id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, created: /* istanbul ignore next */_react2.default.PropTypes.instanceOf(Date), updated: /* istanbul ignore next */_react2.default.PropTypes.instanceOf(Date), originalDate: /* istanbul ignore next */_react2.default.PropTypes.instanceOf(Date) })) }).isRequired, filters: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({ key: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, values: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.any).isRequired })), toggleSearchTerm: /* istanbul ignore next */_react2.default.PropTypes.func, isOnHomeView: /* istanbul ignore next */_react2.default.PropTypes.bool, showLoginModal: /* istanbul ignore next */_react2.default.PropTypes.func, toggleLemma: /* istanbul ignore next */_react2.default.PropTypes.func.isRequired, // from createContainer:
	referenceWorks: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({ title: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, slug: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired })), ready: /* istanbul ignore next */_react2.default.PropTypes.bool }; /* istanbul ignore next */CommentDetail.defaultProps = { filters: null, toggleSearchTerm: null, isOnHomeView: false, showLoginModal: null, referenceWorks: null, ready: false }; /* istanbul ignore next */exports.default =
/* istanbul ignore next */(0, _reactMeteorData.createContainer)(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var comment = _ref.comment;

	var handle = /* istanbul ignore next */_meteor.Meteor.subscribe('referenceWorks', /* istanbul ignore next */_session.Session.get('tenantId'));

	var referenceWorkIds = [];
	var referenceWorks = [];
	if (comment && 'referenceWorks' in comment) {
		comment.referenceWorks.forEach(function (referenceWork) {
			referenceWorkIds.push(referenceWork.referenceWorkId);
		});
		referenceWorks = /* istanbul ignore next */_referenceWorks2.default.find({ _id: { $in: referenceWorkIds } }).fetch();
	}

	return {
		referenceWorks: referenceWorks,
		ready: handle.ready() };

}, CommentDetail);