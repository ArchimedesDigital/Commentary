/* istanbul ignore next */'use strict';


var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_chai = require('chai'); /* istanbul ignore next */var _chai2 = _interopRequireDefault(_chai);
var /* istanbul ignore next */_sinon = require('sinon'); /* istanbul ignore next */var _sinon2 = _interopRequireDefault(_sinon);


var /* istanbul ignore next */_SearchTermButton = require('./SearchTermButton'); /* istanbul ignore next */var _SearchTermButton2 = _interopRequireDefault(_SearchTermButton);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('SearchTermButton', function () {
	it('should render', function () {
		var toggleSearchTerm = /* istanbul ignore next */_sinon2.default.spy();
		var wrapper = /* istanbul ignore next */(0, _enzyme.shallow)(
		/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButton2.default, /* istanbul ignore next */{
			toggleSearchTerm: toggleSearchTerm,
			label: 'TestSearchterm',
			searchTermKey: 'TestKey',
			value: { key: 'value' } }));


		var button = wrapper.find('button');
		/* istanbul ignore next */_chai2.default.assert.ok(button, 'should contain the button child');
	});

	it('should render with active prop set', function () {
		var toggleSearchTerm = /* istanbul ignore next */_sinon2.default.spy();
		var wrapper = /* istanbul ignore next */(0, _enzyme.shallow)(
		/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButton2.default, /* istanbul ignore next */{
			toggleSearchTerm: toggleSearchTerm,
			label: 'TestSearchterm',
			searchTermKey: 'TestKey',
			value: { key: 'value' },
			active: /* istanbul ignore next */true }));


		var button = wrapper.find('button');
		var props = wrapper.instance().props;
		/* istanbul ignore next */_chai2.default.assert.ok(button, 'should contain the button child');
		/* istanbul ignore next */_chai2.default.assert.equal(props.label, 'TestSearchterm');
		/* istanbul ignore next */_chai2.default.assert.include(button.node.props.className, 'search-term-button--active');
	});

	it('should render with activeWork prop set', function () {
		var toggleSearchTerm = /* istanbul ignore next */_sinon2.default.spy();
		var wrapper = /* istanbul ignore next */(0, _enzyme.shallow)(
		/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButton2.default, /* istanbul ignore next */{
			toggleSearchTerm: toggleSearchTerm,
			label: 'TestSearchterm',
			searchTermKey: 'TestKey',
			value: { key: 'value' },
			activeWork: /* istanbul ignore next */true }));


		var button = wrapper.find('button');
		var props = wrapper.instance().props;
		/* istanbul ignore next */_chai2.default.assert.ok(button, 'should contain the button child');
		/* istanbul ignore next */_chai2.default.assert.equal(props.label, 'TestSearchterm');
		/* istanbul ignore next */_chai2.default.assert.include(button.node.props.className, 'search-term-button--active');
	});

	it('should call parent callback with correct values', function () {
		var toggleSearchTerm = /* istanbul ignore next */_sinon2.default.spy();
		var wrapper = /* istanbul ignore next */(0, _enzyme.shallow)(
		/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButton2.default, /* istanbul ignore next */{
			toggleSearchTerm: toggleSearchTerm,
			label: 'TestSearchterm',
			searchTermKey: 'TestKey',
			value: { key: 'value' } }));


		var button = wrapper.find('button');
		var props = wrapper.instance().props;
		button.simulate('click');
		/* istanbul ignore next */_sinon2.default.assert.calledWith(toggleSearchTerm, 'TestKey', { key: 'value' });
		/* istanbul ignore next */_chai2.default.assert.ok(button, 'should contain the button child');
		/* istanbul ignore next */_chai2.default.assert.equal(props.label, 'TestSearchterm');
	});
}); // component:
/* eslint-env mocha */ /* eslint-disable func-names, prefer-arrow-callback, import/no-extraneous-dependencies */