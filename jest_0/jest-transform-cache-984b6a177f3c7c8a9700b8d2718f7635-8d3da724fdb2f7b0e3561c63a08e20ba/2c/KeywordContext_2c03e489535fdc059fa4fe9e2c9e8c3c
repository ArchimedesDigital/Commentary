/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_session = require('meteor/session');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');

var /* istanbul ignore next */_getMuiTheme = require('material-ui/styles/getMuiTheme'); /* istanbul ignore next */var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);
var /* istanbul ignore next */_RaisedButton = require('material-ui/RaisedButton'); /* istanbul ignore next */var _RaisedButton2 = _interopRequireDefault(_RaisedButton);
var /* istanbul ignore next */_FontIcon = require('material-ui/FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);


var /* istanbul ignore next */_muiTheme = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/muiTheme'); /* istanbul ignore next */var _muiTheme2 = _interopRequireDefault(_muiTheme);
var /* istanbul ignore next */_utils = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/utils'); /* istanbul ignore next */var _utils2 = _interopRequireDefault(_utils);


var /* istanbul ignore next */_textNodes = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/textNodes'); /* istanbul ignore next */var _textNodes2 = _interopRequireDefault(_textNodes);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var textFromTextNodesGroupedByEdition = function textFromTextNodesGroupedByEdition(nodesCursor) {
	var editions = [];
	nodesCursor.forEach(function (node) {
		node.text.forEach(function (text) {
			var myEdition = editions.find(function (e) /* istanbul ignore next */{return text.edition.slug === e.slug;});

			if (!myEdition) {
				myEdition = {
					title: text.edition.title,
					slug: text.edition.slug,
					lines: [] };

				editions.push(myEdition);
			}

			myEdition.lines.push({
				html: text.html,
				n: text.n });

		});
	});

	// sort lines for each edition by line number
	for (var i = 0; i < editions.length; ++i) {
		editions[i].lines.sort(function (a, b) {
			if (a.n < b.n) {
				return -1;
			} else if (b.n < a.n) {
				return 1;
			}
			return 0;
		});
	}

	return editions;
}; // api
// lib

var KeywordContext = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'KeywordContext',

	propTypes: {
		keyword: /* istanbul ignore next */_react2.default.PropTypes.object,
		lemmaText: /* istanbul ignore next */_react2.default.PropTypes.array,
		context: /* istanbul ignore next */_react2.default.PropTypes.object },


	childContextTypes: {
		muiTheme: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }, /* istanbul ignore next */


	getInitialState: function getInitialState() {
		return {
			selectedLemma: 0 };

	}, /* istanbul ignore next */

	getChildContext: function getChildContext() {
		return { muiTheme: /* istanbul ignore next */(0, _getMuiTheme2.default)( /* istanbul ignore next */_muiTheme2.default) };
	}, /* istanbul ignore next */

	toggleEdition: function toggleEdition(newSelectedLemma) {
		if (this.state.selectedLemma !== newSelectedLemma && newSelectedLemma < this.props.lemmaText.length) {
			this.setState({
				selectedLemma: newSelectedLemma });

		}
	}, /* istanbul ignore next */

	render: function render() {/* istanbul ignore next */var _this = this;var _props =
		this.props,keyword = _props.keyword,context = _props.context,lemmaText = _props.lemmaText;

		if (!lemmaText || !lemmaText.length) {
			return null;
		}

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'article', /* istanbul ignore next */{ className: 'comment lemma-comment paper-shadow keyword-context' },
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */null,
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'lemma-comment-ref-header' },
						keyword.work.title, /* istanbul ignore next */' ', keyword.subwork.n, /* istanbul ignore next */'.', keyword.lineFrom, keyword.lineTo && keyword.lineFrom !== keyword.lineTo ? /* istanbul ignore next */'-' + keyword.lineTo : ''),

					lemmaText[this.state.selectedLemma].lines.map(function (line, i) /* istanbul ignore next */{return (
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{
								key: i,
								className: 'lemma-text',
								dangerouslySetInnerHTML: { __html: line.html } }));})),



				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'edition-tabs tabs' },

					lemmaText.map(function (lemmaTextEdition, i) {
						var lemmaEditionTitle = /* istanbul ignore next */_utils2.default.trunc(lemmaTextEdition.title, 20);

						return (
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
								key: i,
								label: lemmaEditionTitle,
								/* istanbul ignore next */'data-edition': lemmaTextEdition.title,
								className: /* istanbul ignore next */_this.state.selectedLemma === i ? 'edition-tab tab selected-edition-tab' : 'edition-tab tab',
								onClick: /* istanbul ignore next */_this.toggleEdition.bind(null, i) }));


					})),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'context-tabs tabs' },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
						className: 'context-tab tab',
						href: /* istanbul ignore next */'/commentary/?works=' + context.work + '&subworks=' + context.subwork + '&lineFrom=' +
						context.lineFrom + '&lineTo=' + context.lineTo,
						label: 'Context',
						labelPosition: 'before',
						icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ className: 'mdi mdi-chevron-right' }) }))));




	} });



var KeywordContextContainer = /* istanbul ignore next */(0, _reactMeteorData.createContainer)(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var keyword = _ref.keyword,maxLines = _ref.maxLines;
	var lemmaText = [];
	var context = {};

	if (!keyword) {
		return {
			lemmaText: lemmaText,
			context: context };

	}

	if (keyword.work && keyword.subwork && keyword.lineFrom) {
		var textNodesQuery = {
			'work.slug': keyword.work.slug,
			'subwork.n': keyword.subwork.n,
			'text.n': {
				$gte: keyword.lineFrom,
				$lte: keyword.lineFrom } };


		if (keyword.lineTo) {
			textNodesQuery['text.n'].$lte = keyword.lineTo;
		}
		var textNodesSub = /* istanbul ignore next */_meteor.Meteor.subscribe('textnodes.keyword_context', textNodesQuery);

		context.work = textNodesQuery['work.slug'];
		context.subwork = textNodesQuery['subwork.n'];
		context.lineFrom = textNodesQuery['text.n'].$gte;
		context.lineTo = textNodesQuery['text.n'].$lte;

		if (textNodesSub.ready()) {
			var textNodesCursor = /* istanbul ignore next */_textNodes2.default.find(textNodesQuery);
			lemmaText = textFromTextNodesGroupedByEdition(textNodesCursor);
		}

	} else {
		var commentsSub = /* istanbul ignore next */_meteor.Meteor.subscribe('comments.keyword_context', keyword._id, /* istanbul ignore next */_session.Session.get('tenantId'));

		if (commentsSub.ready()) {
			var commentCursor = /* istanbul ignore next */(0, _utils.queryCommentWithKeywordId)(keyword._id);

			if (commentCursor.count() > 0) {
				var comment = commentCursor.fetch()[0];
				var _textNodesQuery = /* istanbul ignore next */(0, _utils.makeKeywordContextQueryFromComment)(comment, maxLines);
				var _textNodesSub = /* istanbul ignore next */_meteor.Meteor.subscribe('textnodes.keyword_context', _textNodesQuery);

				context.work = _textNodesQuery['work.slug'];
				context.subwork = _textNodesQuery['subwork.n'];
				context.lineFrom = _textNodesQuery['text.n'].$gte;
				context.lineTo = _textNodesQuery['text.n'].$lte;

				if (_textNodesSub.ready()) {
					var _textNodesCursor = /* istanbul ignore next */_textNodes2.default.find(_textNodesQuery);
					lemmaText = textFromTextNodesGroupedByEdition(_textNodesCursor);
				}
			}
		}
	}

	return {
		lemmaText: lemmaText,
		context: context };

}, KeywordContext); /* istanbul ignore next */exports.default =


KeywordContextContainer;