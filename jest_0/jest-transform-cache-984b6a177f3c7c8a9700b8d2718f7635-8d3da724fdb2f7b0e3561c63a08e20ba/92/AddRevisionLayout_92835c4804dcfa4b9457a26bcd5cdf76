/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};









// api




// components:






// lib
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);var /* istanbul ignore next */_meteor = require('meteor/meteor');var /* istanbul ignore next */_session = require('meteor/session');var /* istanbul ignore next */_alanningRoles = require('meteor/alanning:roles');var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');var /* istanbul ignore next */_slugify = require('slugify'); /* istanbul ignore next */var _slugify2 = _interopRequireDefault(_slugify);var /* istanbul ignore next */_reactCookie = require('react-cookie'); /* istanbul ignore next */var _reactCookie2 = _interopRequireDefault(_reactCookie);var /* istanbul ignore next */_MuiThemeProvider = require('material-ui/styles/MuiThemeProvider'); /* istanbul ignore next */var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);var /* istanbul ignore next */_getMuiTheme = require('material-ui/styles/getMuiTheme'); /* istanbul ignore next */var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);var /* istanbul ignore next */_comments = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/comments'); /* istanbul ignore next */var _comments2 = _interopRequireDefault(_comments);var /* istanbul ignore next */_commenters = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/commenters'); /* istanbul ignore next */var _commenters2 = _interopRequireDefault(_commenters);var /* istanbul ignore next */_keywords = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/keywords'); /* istanbul ignore next */var _keywords2 = _interopRequireDefault(_keywords);var /* istanbul ignore next */_Header = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/layouts/header/Header'); /* istanbul ignore next */var _Header2 = _interopRequireDefault(_Header);var /* istanbul ignore next */_FilterWidget = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/FilterWidget'); /* istanbul ignore next */var _FilterWidget2 = _interopRequireDefault(_FilterWidget);var /* istanbul ignore next */_CommentLemmaSelect = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/editor/addComment/CommentLemmaSelect'); /* istanbul ignore next */var _CommentLemmaSelect2 = _interopRequireDefault(_CommentLemmaSelect);var /* istanbul ignore next */_AddRevision = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/editor/addRevision/AddRevision'); /* istanbul ignore next */var _AddRevision2 = _interopRequireDefault(_AddRevision);var /* istanbul ignore next */_ContextPanel = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/layouts/commentary/ContextPanel'); /* istanbul ignore next */var _ContextPanel2 = _interopRequireDefault(_ContextPanel);var /* istanbul ignore next */_muiTheme = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/muiTheme'); /* istanbul ignore next */var _muiTheme2 = _interopRequireDefault(_muiTheme);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


var AddRevisionLayout = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'AddRevisionLayout',

	propTypes: {
		ready: /* istanbul ignore next */_react2.default.PropTypes.bool,
		comment: /* istanbul ignore next */_react2.default.PropTypes.object,
		commenters: /* istanbul ignore next */_react2.default.PropTypes.array,
		keywords: /* istanbul ignore next */_react2.default.PropTypes.array }, /* istanbul ignore next */


	getInitialState: function getInitialState() {
		return {
			filters: [],
			contextReaderOpen: true };

	}, /* istanbul ignore next */

	componentWillUpdate: function componentWillUpdate() {
		if (this.props.ready) this.handlePermissions();
	}, /* istanbul ignore next */

	addRevision: function addRevision(formData, textValue, textRawValue) {
		var self = this; /* istanbul ignore next */var
		comment = this.props.comment;
		var revision = {
			title: formData.titleValue,
			text: textValue,
			textRaw: textRawValue,
			created: new Date(),
			slug: /* istanbul ignore next */(0, _slugify2.default)(formData.titleValue) };


		/* istanbul ignore next */_meteor.Meteor.call('comments.add.revision', comment._id, revision, function (err) {
			if (err) {
				console.error('Error adding revision', err);
			}
			self.update(formData);
		});
		// TODO: handle behavior after comment added (add info about success)
	}, /* istanbul ignore next */

	update: function update(formData) {/* istanbul ignore next */var _this = this;var
		comment = this.props.comment;

		this.addNewKeywordsAndIdeas(formData.keywordsValue, formData.keyideasValue, function () {
			// get keywords after they were created:
			var keywords = /* istanbul ignore next */_this.getKeywords(formData);
			var authToken = /* istanbul ignore next */_reactCookie2.default.load('loginToken');

			var update = [{}];
			if (keywords) {
				update = {
					keywords: keywords,
					referenceWorks: formData.referenceWorks };

			}

			/* istanbul ignore next */_meteor.Meteor.call('comment.update', authToken, comment._id, update, function (_err) {
				if (_err) {
					console.error('Error updating comment after adding revision', _err);
				}

				FlowRouter.go( /* istanbul ignore next */'/commentary/' + comment._id + '/edit');
			});
		});
		// TODO: handle behavior after comment added (add info about success)
	}, /* istanbul ignore next */

	matchKeywords: function matchKeywords(keywords) {
		var matchedKeywords = [];

		if (keywords) {
			keywords.forEach(function (keyword) {
				var keywordTitle = /* istanbul ignore next */void 0;
				if ( /* istanbul ignore next */(typeof keyword === 'undefined' ? 'undefined' : _typeof(keyword)) === 'object') {
					keywordTitle = keyword.label;
				} else {
					keywordTitle = keyword;
				}
				var foundKeyword = /* istanbul ignore next */_keywords2.default.findOne({
					title: keywordTitle });

				matchedKeywords.push(foundKeyword);
			});
		}

		return matchedKeywords;
	}, /* istanbul ignore next */

	addNewKeywordsAndIdeas: function addNewKeywordsAndIdeas(keywords, keyideas, next) {/* istanbul ignore next */var _this2 = this;
		this.addNewKeywords(keywords, 'word', function () {
			/* istanbul ignore next */_this2.addNewKeywords(keyideas, 'idea', function () /* istanbul ignore next */{return next();});
		});
	}, /* istanbul ignore next */

	addNewKeywords: function addNewKeywords(keywords, type, next) {
		// TODO should be handled server-side
		if (keywords) {
			var token = /* istanbul ignore next */_reactCookie2.default.load('loginToken');
			var newKeywordArray = [];
			keywords.forEach(function (keyword) {
				var foundKeyword = /* istanbul ignore next */_keywords2.default.findOne({ title: keyword });
				if (!foundKeyword) {
					var newKeyword = {
						title: keyword.label,
						slug: /* istanbul ignore next */(0, _slugify2.default)(keyword.label),
						type: type,
						tenantId: /* istanbul ignore next */_session.Session.get('tenantId') };

					newKeywordArray.push(newKeyword);
				}
			});
			if (newKeywordArray.length > 0) {
				return (/* istanbul ignore next */_meteor.Meteor.call('keywords.insert', token, newKeywordArray, function (err) {
						if (err) {
							console.log('Keywords insert error', err);
							return null;
						}
						return next();
					}));
			}
			return next();
		}
		return next();
	}, /* istanbul ignore next */

	getKeywords: function getKeywords(formData) {
		var keywords = [];
		this.matchKeywords(formData.keywordsValue).forEach(function (matchedKeyword) {
			keywords.push(matchedKeyword);
		});
		this.matchKeywords(formData.keyideasValue).forEach(function (matchedKeyword) {
			keywords.push(matchedKeyword);
		});

		return keywords;
	}, /* istanbul ignore next */

	closeContextReader: function closeContextReader() {
		this.setState({
			contextReaderOpen: false });

	}, /* istanbul ignore next */

	openContextReader: function openContextReader() {
		this.setState({
			contextReaderOpen: true });

	}, /* istanbul ignore next */

	handlePermissions: function handlePermissions() {
		if (this.props.comment && this.props.commenters.length) {
			var isOwner = false;
			this.props.commenters.forEach(function (commenter) {
				if (!isOwner) {
					isOwner = ~ /* istanbul ignore next */_meteor.Meteor.user().canEditCommenters.indexOf(commenter._id);
				}
			});
			if (!isOwner) {
				FlowRouter.go('/');
			}
		}
	}, /* istanbul ignore next */

	toggleSearchTerm: function toggleSearchTerm(key, value) {
		var filters = this.state.filters;
		var keyIsInFilter = false;
		var valueIsInFilter = false;
		var filterValueToRemove = /* istanbul ignore next */void 0;
		var filterToRemove = /* istanbul ignore next */void 0;

		filters.forEach(function (filter, i) {
			if (filter.key === key) {
				keyIsInFilter = true;

				filter.values.forEach(function (filterValue, j) {
					if (filterValue._id === value._id) {
						valueIsInFilter = true;
						filterValueToRemove = j;
					}
				});

				if (valueIsInFilter) {
					filter.values.splice(filterValueToRemove, 1);
					if (filter.values.length === 0) {
						filterToRemove = i;
					}
				} else if (key === 'works') {
					filters[i].values = [value];
				} else {
					filter.values.push(value);
				}
			}
		});


		if (typeof filterToRemove !== 'undefined') {
			filters.splice(filterToRemove, 1);
		}

		if (!keyIsInFilter) {
			filters.push({
				key: key,
				values: [value] });

		}

		this.setState({
			filters: filters,
			skip: 0 });

	}, /* istanbul ignore next */

	handleChangeLineN: function handleChangeLineN(e) {
		var filters = this.state.filters;

		if (e.from > 1) {
			var lineFromInFilters = false;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineFrom') {
					filters[i].values = [e.from];
					lineFromInFilters = true;
				}
			});

			if (!lineFromInFilters) {
				filters.push({
					key: 'lineFrom',
					values: [e.from] });

			}
		} else {
			var filterToRemove = /* istanbul ignore next */void 0;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineFrom') {
					filterToRemove = i;
				}
			});

			if (typeof filterToRemove !== 'undefined') {
				filters.splice(filterToRemove, 1);
			}
		}

		if (e.to < 2100) {
			var lineToInFilters = false;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineTo') {
					filters[i].values = [e.to];
					lineToInFilters = true;
				}
			});

			if (!lineToInFilters) {
				filters.push({
					key: 'lineTo',
					values: [e.to] });

			}
		} else {
			var _filterToRemove = /* istanbul ignore next */void 0;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineTo') {
					_filterToRemove = i;
				}
			});

			if (typeof _filterToRemove !== 'undefined') {
				filters.splice(_filterToRemove, 1);
			}
		}

		this.setState({
			filters: filters });

	}, /* istanbul ignore next */

	render: function render() {/* istanbul ignore next */var _this3 = this;
		var filters = this.state.filters; /* istanbul ignore next */var _props =
		this.props,ready = _props.ready,comment = _props.comment;

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MuiThemeProvider2.default, /* istanbul ignore next */{ muiTheme: /* istanbul ignore next */(0, _getMuiTheme2.default)( /* istanbul ignore next */_muiTheme2.default) },
				ready && comment ?
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'chs-layout chs-editor-layout add-comment-layout' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Header2.default, /* istanbul ignore next */{
						toggleSearchTerm: this.toggleSearchTerm,
						handleChangeLineN: this.handleChangeLineN,
						filters: filters,
						initialSearchEnabled: /* istanbul ignore next */true,
						addCommentPage: /* istanbul ignore next */true }),


					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'main', /* istanbul ignore next */null,

						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'commentary-comments' },
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'comment-group' },
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentLemmaSelect2.default, /* istanbul ignore next */{
									ref: function /* istanbul ignore next */ref(component) {/* istanbul ignore next */_this3.commentLemmaSelect = component;},
									selectedLineFrom: comment.lineFrom,
									selectedLineTo: comment.lineFrom + comment.nLines - 1,
									workSlug: comment.work.slug,
									subworkN: comment.subwork.n }),


								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_AddRevision2.default, /* istanbul ignore next */{
									submitForm: this.addRevision,
									update: this.update,
									comment: comment }),


								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ContextPanel2.default, /* istanbul ignore next */{
									open: this.state.contextReaderOpen,
									workSlug: comment.work.slug,
									subworkN: comment.subwork.n,
									lineFrom: comment.lineFrom,
									selectedLineFrom: comment.lineFrom,
									selectedLineTo: comment.lineFrom + comment.nLines - 1,
									editor: /* istanbul ignore next */true,
									disableEdit: /* istanbul ignore next */true })))),







					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FilterWidget2.default, /* istanbul ignore next */{
						filters: filters,
						toggleSearchTerm: this.toggleSearchTerm })) :




				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'ahcip-spinner commentary-loading full-page-spinner' },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'double-bounce1' }),
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'double-bounce2' }))));




	} });


var AddRevisionLayoutContainer = /* istanbul ignore next */(0, _reactMeteorData.createContainer)(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var commentId = _ref.commentId;
	var commentsSub = /* istanbul ignore next */_meteor.Meteor.subscribe('comments.id', commentId, /* istanbul ignore next */_session.Session.get('tenantId'));
	var commentersSub = /* istanbul ignore next */_meteor.Meteor.subscribe('commenters', /* istanbul ignore next */_session.Session.get('tenantId'));
	var keywordsSub = /* istanbul ignore next */_meteor.Meteor.subscribe('keywords.all', { tenantId: /* istanbul ignore next */_session.Session.get('tenantId') });

	var ready = /* istanbul ignore next */_alanningRoles.Roles.subscription.ready() && commentsSub.ready() && keywordsSub.ready() && commentersSub.ready();

	var comment = /* istanbul ignore next */_comments2.default.findOne({ _id: commentId });
	var commenters = [];
	if (comment) {
		comment.commenters.forEach(function (commenter) {
			commenters.push( /* istanbul ignore next */_commenters2.default.findOne({
				slug: commenter.slug }));

		});
	}
	var keywords = /* istanbul ignore next */_keywords2.default.find().fetch();

	return {
		ready: ready,
		comment: comment,
		commenters: commenters,
		keywords: keywords };

}, AddRevisionLayout); /* istanbul ignore next */exports.default =

AddRevisionLayoutContainer;