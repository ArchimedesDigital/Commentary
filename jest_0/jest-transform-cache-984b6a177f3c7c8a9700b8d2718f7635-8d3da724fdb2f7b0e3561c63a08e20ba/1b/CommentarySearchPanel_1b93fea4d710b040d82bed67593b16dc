/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _debounce2 = require('lodash/debounce');var _debounce3 = _interopRequireDefault(_debounce2);var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');
var /* istanbul ignore next */_session = require('meteor/session');


var /* istanbul ignore next */_getMuiTheme = require('material-ui/styles/getMuiTheme'); /* istanbul ignore next */var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);
var /* istanbul ignore next */_TextField = require('material-ui/TextField'); /* istanbul ignore next */var _TextField2 = _interopRequireDefault(_TextField);
var /* istanbul ignore next */_Drawer = require('material-ui/Drawer'); /* istanbul ignore next */var _Drawer2 = _interopRequireDefault(_Drawer);
var /* istanbul ignore next */_Card = require('material-ui/Card');


var /* istanbul ignore next */_commenters = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/commenters'); /* istanbul ignore next */var _commenters2 = _interopRequireDefault(_commenters);
var /* istanbul ignore next */_keywords = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/keywords'); /* istanbul ignore next */var _keywords2 = _interopRequireDefault(_keywords);
var /* istanbul ignore next */_referenceWorks = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/referenceWorks'); /* istanbul ignore next */var _referenceWorks2 = _interopRequireDefault(_referenceWorks);
var /* istanbul ignore next */_works = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/works'); /* istanbul ignore next */var _works2 = _interopRequireDefault(_works);


var /* istanbul ignore next */_LineRangeSlider = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/header/LineRangeSlider'); /* istanbul ignore next */var _LineRangeSlider2 = _interopRequireDefault(_LineRangeSlider);
var /* istanbul ignore next */_SearchTermButtonPanel = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/header/SearchTermButtonPanel'); /* istanbul ignore next */var _SearchTermButtonPanel2 = _interopRequireDefault(_SearchTermButtonPanel);
var /* istanbul ignore next */_SearchCards = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/header/SearchCards');


var /* istanbul ignore next */_utils = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/utils'); /* istanbul ignore next */var _utils2 = _interopRequireDefault(_utils);
var /* istanbul ignore next */_muiTheme = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/muiTheme'); /* istanbul ignore next */var _muiTheme2 = _interopRequireDefault(_muiTheme);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // lib:


var CommentarySearchPanel = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'CommentarySearchPanel',

	propTypes: {
		filters: /* istanbul ignore next */_react2.default.PropTypes.array,
		toggleSearchTerm: /* istanbul ignore next */_react2.default.PropTypes.func,
		handleChangeTextsearch: /* istanbul ignore next */_react2.default.PropTypes.func,
		handleChangeLineN: /* istanbul ignore next */_react2.default.PropTypes.func,
		open: /* istanbul ignore next */_react2.default.PropTypes.bool,
		closeRightMenu: /* istanbul ignore next */_react2.default.PropTypes.func,
		keyideas: /* istanbul ignore next */_react2.default.PropTypes.array,
		keywords: /* istanbul ignore next */_react2.default.PropTypes.array,
		commenters: /* istanbul ignore next */_react2.default.PropTypes.array,
		works: /* istanbul ignore next */_react2.default.PropTypes.array,
		referenceWorks: /* istanbul ignore next */_react2.default.PropTypes.array,
		isTest: /* istanbul ignore next */_react2.default.PropTypes.bool },


	childContextTypes: {
		muiTheme: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }, /* istanbul ignore next */


	getInitialState: function getInitialState() {
		return {
			subworks: [],
			activeWork: '' };

	}, /* istanbul ignore next */

	getChildContext: function getChildContext() {
		return { muiTheme: /* istanbul ignore next */(0, _getMuiTheme2.default)( /* istanbul ignore next */_muiTheme2.default) };
	}, /* istanbul ignore next */

	toggleSearchTerm: function toggleSearchTerm(key, value) {
		this.props.toggleSearchTerm(key, value);
	}, /* istanbul ignore next */

	toggleWorkSearchTerm: function toggleWorkSearchTerm(key, value) {
		var work = value;
		var newValue = value;
		newValue.subworks.forEach(function (subwork, i) {
			newValue.subworks[i].work = work;
		});

		if (this.state.activeWork === newValue.slug) {
			this.setState({
				subworks: [],
				activeWork: '' });

		} else {
			newValue.subworks.sort(function (a, b) {
				if (a.n < b.n) {
					return -1;
				}
				if (a.n > b.n) {
					return 1;
				}
				return 0;
			});
			this.setState({
				subworks: newValue.subworks,
				activeWork: newValue.slug });

		}

		this.props.toggleSearchTerm(key, newValue);
	}, /* istanbul ignore next */

	handleChangeTextsearch: function handleChangeTextsearch() {
		this.props.handleChangeTextsearch($('.text-search--drawer input').val());
	}, /* istanbul ignore next */

	render: function render() {
		var self = this; /* istanbul ignore next */var _props =
		this.props,keyideas = _props.keyideas,keywords = _props.keywords,commenters = _props.commenters,works = _props.works,referenceWorks = _props.referenceWorks,isTest = _props.isTest;
		var filters = this.props.filters || [];

		var styles = {
			drawer: {
				backgroundColor: '#ddd' },

			flatButton: {
				width: 'auto',
				minWidth: 'none',
				height: '80px',
				padding: '21px 5px' },

			flatIconButton: {
				padding: '10px 20px',
				width: 'auto',
				minWidth: 'none',
				height: '55px' },

			wrapper: {
				display: 'flex',
				flexWrap: 'wrap' },

			textSearch: {
				width: '100%',
				padding: '0px 10px',
				background: '#f2f2f2' },

			cardHeader: {
				fontFamily: 'Proxima N W01 At Smbd',
				textTransform: 'uppercase',
				fontSize: '14px',
				fontWeight: 'bold' },

			lineSearch: {
				width: '99%',
				margin: '0px auto' } };



		var drawerWidth = 400;
		if (window.innerWidth < 500) {
			drawerWidth = 300;
		}
		if (window.innerWidth < 300) {
			drawerWidth = 210;
		}

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */{
					width: drawerWidth,
					className: 'search-tools-drawer',
					openSecondary: /* istanbul ignore next */true,
					open: this.props.open,
					docked: false,
					onRequestChange: this.props.closeRightMenu,
					style: styles.drawer },

				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'search-tool text-search text-search--drawer' },
					!isTest ?
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
						hintText: '',
						floatingLabelText: 'Search',
						fullWidth: /* istanbul ignore next */true,
						onChange: /* istanbul ignore next */(0, _debounce3.default)(this.handleChangeTextsearch, 300) }) :

					''),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchCards.WorksCard, /* istanbul ignore next */{
					works: works,
					toggleWorkSearchTerm: this.toggleWorkSearchTerm,
					styles: styles,
					filters: filters }),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.Card, /* istanbul ignore next */{
						className: 'search-tool-card' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardHeader, /* istanbul ignore next */{
						title: 'Book',
						style: styles.cardHeader,
						actAsExpander: !(self.state.subworks.length === 0),
						showExpandableButton: !(self.state.subworks.length === 0),
						className: /* istanbul ignore next */'card-header ' + (self.state.subworks.length === 0 ? '' : 'card-header--disabled') }),

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardText, /* istanbul ignore next */{ expandable: /* istanbul ignore next */true, style: styles.wrapper },
						self.state.subworks.map(function (subwork, i) {
							var active = false;
							filters.forEach(function (filter) {
								if (filter.key === 'subworks') {
									filter.values.forEach(function (value) {
										if (subwork.n === value.n) {
											active = true;
										}
									});
								}
							});

							return (
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButtonPanel2.default, /* istanbul ignore next */{
									key: i,
									toggleSearchTerm: self.toggleSearchTerm,
									label: /* istanbul ignore next */subwork.work.title + ' ' + subwork.title,
									searchTermKey: 'subworks',
									value: subwork,
									active: active }));


						}))),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.Card, /* istanbul ignore next */{
						className: 'search-tool-card' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardHeader, /* istanbul ignore next */{
						title: 'Line Number',
						style: styles.cardHeader,
						actAsExpander: !(self.state.subworks.length === 0),
						showExpandableButton: !(self.state.subworks.length === 0),
						className: /* istanbul ignore next */'card-header ' + (self.state.subworks.length === 0 ? '' : 'card-header--disabled') }),

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardText, /* istanbul ignore next */{ expandable: /* istanbul ignore next */true, style: styles.wrapper },
						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: styles.lineSearch, className: 'line-search' },
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_LineRangeSlider2.default, /* istanbul ignore next */{
								handleChangeLineN: this.props.handleChangeLineN })))),




				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.Card, /* istanbul ignore next */{
						className: 'search-tool-card' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardHeader, /* istanbul ignore next */{
						title: 'Keywords',
						style: styles.cardHeader,
						actAsExpander: /* istanbul ignore next */true,
						showExpandableButton: /* istanbul ignore next */true,
						className: 'card-header' }),

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardText, /* istanbul ignore next */{ expandable: /* istanbul ignore next */true, style: styles.wrapper },
						keywords && keywords.map(function (keyword, i) {
							var active = false;
							filters.forEach(function (filter) {
								if (filter.key === 'keywords') {
									filter.values.forEach(function (value) {
										if (keyword._id === value._id) {
											active = true;
										}
									});
								}
							});

							return (
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButtonPanel2.default, /* istanbul ignore next */{
									key: i,
									toggleSearchTerm: self.toggleSearchTerm,
									label: keyword.title,
									searchTermKey: 'keywords',
									value: keyword,
									active: active }));


						}))),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.Card, /* istanbul ignore next */{
						className: 'search-tool-card' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardHeader, /* istanbul ignore next */{
						title: 'Key Ideas',
						style: styles.cardHeader,
						actAsExpander: /* istanbul ignore next */true,
						showExpandableButton: /* istanbul ignore next */true,
						className: 'card-header' }),

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardText, /* istanbul ignore next */{ expandable: /* istanbul ignore next */true, style: styles.wrapper },
						keyideas && keyideas.map(function (keyidea, i) {
							var active = false;
							filters.forEach(function (filter) {
								if (filter.key === 'keyideas') {
									filter.values.forEach(function (value) {
										if (keyidea._id === value._id) {
											active = true;
										}
									});
								}
							});

							return (
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButtonPanel2.default, /* istanbul ignore next */{
									key: i,
									toggleSearchTerm: self.toggleSearchTerm,
									label: keyidea.title,
									searchTermKey: 'keyideas',
									value: keyidea,
									active: active }));


						}))),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.Card, /* istanbul ignore next */{
						className: 'search-tool-card' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardHeader, /* istanbul ignore next */{
						title: 'Commentator',
						style: styles.cardHeader,
						actAsExpander: /* istanbul ignore next */true,
						showExpandableButton: /* istanbul ignore next */true,
						className: 'card-header' }),

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardText, /* istanbul ignore next */{ expandable: /* istanbul ignore next */true, style: styles.wrapper },
						commenters && commenters.map(function (commenter, i) {
							var active = false;
							filters.forEach(function (filter) {
								if (filter.key === 'commenters') {
									filter.values.forEach(function (value) {
										if (commenter._id === value._id) {
											active = true;
										}
									});
								}
							});

							return (
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButtonPanel2.default, /* istanbul ignore next */{
									key: i,
									toggleSearchTerm: self.toggleSearchTerm,
									label: commenter.name,
									searchTermKey: 'commenters',
									value: commenter,
									active: active }));


						}))),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.Card, /* istanbul ignore next */{
						className: 'search-tool-card' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardHeader, /* istanbul ignore next */{
						title: 'Reference',
						style: styles.cardHeader,
						actAsExpander: /* istanbul ignore next */true,
						showExpandableButton: /* istanbul ignore next */true,
						className: 'card-header' }),

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Card.CardText, /* istanbul ignore next */{ expandable: /* istanbul ignore next */true, style: styles.wrapper },
						referenceWorks && referenceWorks.map(function (reference, i) {
							var active = false;
							filters.forEach(function (filter) {
								if (filter.key === 'reference') {
									filter.values.forEach(function (value) {
										if (reference.title === value.title) {
											active = true;
										}
									});
								}
							});

							return (
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchTermButtonPanel2.default, /* istanbul ignore next */{
									key: i,
									toggleSearchTerm: self.toggleSearchTerm,
									label: /* istanbul ignore next */_utils2.default.trunc(reference.title, 30),
									searchTermKey: 'reference',
									value: reference,
									active: active }));


						})))));




	} }); // components:
// api:
/* istanbul ignore next */exports.default =
/* istanbul ignore next */(0, _reactMeteorData.createContainer)(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var addCommentPage = _ref.addCommentPage;
	var works = [];
	var keywords = [];
	var keyideas = [];
	var commenters = [];
	var referenceWorks = [];

	if (!addCommentPage) {
		/* istanbul ignore next */_meteor.Meteor.subscribe('commenters', /* istanbul ignore next */_session.Session.get('tenantId'));
		/* istanbul ignore next */_meteor.Meteor.subscribe('keywords.all', { tenantId: /* istanbul ignore next */_session.Session.get('tenantId') });
		/* istanbul ignore next */_meteor.Meteor.subscribe('referenceWorks', /* istanbul ignore next */_session.Session.get('tenantId'));
	}
	/* istanbul ignore next */_meteor.Meteor.subscribe('works', /* istanbul ignore next */_session.Session.get('tenantId'));

	// FETCH DATA:
	keyideas = /* istanbul ignore next */_keywords2.default.find({ type: 'idea' }).fetch();
	keywords = /* istanbul ignore next */_keywords2.default.find({ type: 'word' }).fetch();
	commenters = /* istanbul ignore next */_commenters2.default.find().fetch();
	works = /* istanbul ignore next */_works2.default.find({}, { sort: { order: 1 } }).fetch();
	referenceWorks = /* istanbul ignore next */_referenceWorks2.default.find({}, { sort: { title: 1 } }).fetch();

	return {
		keyideas: keyideas,
		keywords: keywords,
		commenters: commenters,
		works: works,
		referenceWorks: referenceWorks };

}, CommentarySearchPanel);