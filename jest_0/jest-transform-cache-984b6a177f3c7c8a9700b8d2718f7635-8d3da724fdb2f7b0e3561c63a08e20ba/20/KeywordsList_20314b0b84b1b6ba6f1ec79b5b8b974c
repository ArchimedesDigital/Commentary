/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');
var /* istanbul ignore next */_session = require('meteor/session');


var /* istanbul ignore next */_keywords = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/keywords'); /* istanbul ignore next */var _keywords2 = _interopRequireDefault(_keywords);


var /* istanbul ignore next */_KeywordTeaser = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/keywords/KeywordTeaser'); /* istanbul ignore next */var _KeywordTeaser2 = _interopRequireDefault(_KeywordTeaser);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // api

var KeywordsList = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'KeywordsList',

	propTypes: {
		type: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
		limit: /* istanbul ignore next */_react2.default.PropTypes.number,
		keywords: /* istanbul ignore next */_react2.default.PropTypes.array }, /* istanbul ignore next */


	renderKeywords: function renderKeywords() {/* istanbul ignore next */var
		keywords = this.props.keywords;

		if (!keywords) {
			return null;
		}

		return keywords.map(function (keyword, i) /* istanbul ignore next */{return (
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_KeywordTeaser2.default, /* istanbul ignore next */{
					key: i,
					keyword: keyword }));});


	}, /* istanbul ignore next */

	render: function render() {
		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'keywords-list' },
				this.renderKeywords()));


	} }); // components
/* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactMeteorData.createContainer)(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var type = _ref.type,limit = _ref.limit;
	var skip = 0;
	var _limit = 100;
	if (limit) {
		_limit = limit;
	}

	var query = {
		type: type,
		tenantId: /* istanbul ignore next */_session.Session.get('tenantId'),
		count: { $gte: 1 } };


	switch (type) {
		case 'word':
			/* istanbul ignore next */_meteor.Meteor.subscribe('keywords.keywords', query, skip, _limit);
			break;
		case 'idea':
			/* istanbul ignore next */_meteor.Meteor.subscribe('keywords.keyideas', query, skip, _limit);
			break;
		default:
			break;}


	var keywords = /* istanbul ignore next */_keywords2.default.find(query, { limit: _limit }).fetch() || [];

	return {
		keywords: keywords,
		type: type };

}, KeywordsList);