/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);

var /* istanbul ignore next */_getMuiTheme = require('material-ui/styles/getMuiTheme'); /* istanbul ignore next */var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);


var /* istanbul ignore next */_muiTheme = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/muiTheme'); /* istanbul ignore next */var _muiTheme2 = _interopRequireDefault(_muiTheme);


var /* istanbul ignore next */_CommenterWorkCircle = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commenters/CommenterWorkCircle'); /* istanbul ignore next */var _CommenterWorkCircle2 = _interopRequireDefault(_CommenterWorkCircle);
var /* istanbul ignore next */_CommenterWorkVisualization = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commenters/CommenterWorkVisualization'); /* istanbul ignore next */var _CommenterWorkVisualization2 = _interopRequireDefault(_CommenterWorkVisualization);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // components


var CommenterVisualizations = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'CommenterVisualizations',

	propTypes: {
		commenter: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired,
		isTest: /* istanbul ignore next */_react2.default.PropTypes.bool },


	childContextTypes: {
		muiTheme: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }, /* istanbul ignore next */


	getInitialState: function getInitialState() {
		return {
			visibleWork: '' };

	}, /* istanbul ignore next */

	getChildContext: function getChildContext() {
		return { muiTheme: /* istanbul ignore next */(0, _getMuiTheme2.default)( /* istanbul ignore next */_muiTheme2.default) };
	}, /* istanbul ignore next */

	toggleVisibleWork: function toggleVisibleWork(workToToggle) {
		if (this.state.visibleWork === workToToggle) {
			this.setState({
				visibleWork: '' });

		} else {
			this.setState({
				visibleWork: workToToggle });

		}
	}, /* istanbul ignore next */

	renderWorks: function renderWorks() {/* istanbul ignore next */var _this = this;var _props =
		this.props,commenter = _props.commenter,isTest = _props.isTest;

		if (commenter.nCommentsWorks) {
			return commenter.nCommentsWorks.map(function (work, i) /* istanbul ignore next */{return (
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommenterWorkVisualization2.default, /* istanbul ignore next */{
						key: i,
						toggleVisibleWork: /* istanbul ignore next */_this.toggleVisibleWork,
						work: work,
						commenterSlug: commenter.slug,
						isTest: isTest }));});


		}
		return '';
	}, /* istanbul ignore next */

	render: function render() {/* istanbul ignore next */var
		commenter = this.props.commenter;

		var classes = 'commenter-visualizations';
		if (this.state.visibleWork.length) {
			classes += /* istanbul ignore next */' commenter-visualizations-' + this.state.visibleWork + '-visible';
		}

		var workIliadLevel = 0;
		var workOdysseyLevel = 0;
		var workHymnsLevel = 0;

		if (commenter.nCommentsIliad > 0) {
			workIliadLevel = Math.floor(commenter.nCommentsIliad / commenter.nCommentsTotal * 10);
		}

		if (commenter.nCommentsOdyssey > 0) {
			workOdysseyLevel = Math.floor(commenter.nCommentsOdyssey / commenter.nCommentsTotal * 10);
		}

		if (commenter.nCommentsHymns > 0) {
			workHymnsLevel = Math.floor(commenter.nCommentsHymns / commenter.nCommentsTotal * 10);
		}

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: classes },
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'commenter-visualization-title' },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h2', /* istanbul ignore next */null, /* istanbul ignore next */'Comments')),



				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'commenter-work-circles' },
					workIliadLevel ?
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommenterWorkCircle2.default, /* istanbul ignore next */{
						toggleVisibleWork: this.toggleVisibleWork,
						workTitle: 'Iliad',
						workSlug: 'iliad',
						workLevel: workIliadLevel,
						nComments: commenter.nCommentsIliad }) :

					'',
					workOdysseyLevel ?
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommenterWorkCircle2.default, /* istanbul ignore next */{
						toggleVisibleWork: this.toggleVisibleWork,
						workTitle: 'Odyssey',
						workSlug: 'odyssey',
						workLevel: workOdysseyLevel,
						nComments: commenter.nCommentsOdyssey }) :

					'',
					workHymnsLevel ?
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommenterWorkCircle2.default, /* istanbul ignore next */{
						toggleVisibleWork: this.toggleVisibleWork,
						workTitle: 'Hymns',
						workSlug: 'homeric-hymns',
						workLevel: workHymnsLevel,
						nComments: commenter.nCommentsHymns }) :

					''),

				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'work-visualizations' },
					this.renderWorks())));



	} }); // lib:
/* istanbul ignore next */exports.default =

CommenterVisualizations;