/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.getCommentGroupId = exports.parseCommentsToCommentGroups = exports.createQueryFromFilters = undefined;var /* istanbul ignore next */_commenters = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/commenters'); /* istanbul ignore next */var _commenters2 = _interopRequireDefault(_commenters);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/*
	helpers

var createQueryFromFilters = function createQueryFromFilters(filters) {
	var query = {};
	var values = [];
	if (filters) {
		filters.forEach(function (filter) {
			switch (filter.key) {
				case '_id':
					query._id = filter.values[0];
					break;
				case 'textsearch':
					query.$text = {
						$search: filter.values[0] };

					break;
				case 'keyideas':
				case 'keywords':
					values = [];
					filter.values.forEach(function (value) {
						values.push(value.slug);
					});
					query['keywords.slug'] = {
						$in: values };

					break;

				case 'commenters':
					values = [];
					filter.values.forEach(function (value) {
						values.push(value.slug);
					});
					query['commenters.slug'] = {
						$in: values };

					break;

				case 'reference':
					values = [];
					filter.values.forEach(function (value) {
						values.push(value.title);
					});
					query.reference = {
						$in: values };

					break;

				case 'works':
					values = [];
					filter.values.forEach(function (value) {
						values.push(value.slug);
					});
					query['work.slug'] = {
						$in: values };

					break;

				case 'subworks':
					values = [];
					filter.values.forEach(function (value) {
						values.push(value.n);
					});
					query['subwork.n'] = {
						$in: values };

					break;

				case 'lineFrom':
					// Values will always be an array with a length of one
					query.lineFrom = query.lineFrom || {};
					query.lineFrom.$gte = filter.values[0];
					break;

				case 'lineTo':
					// Values will always be an array with a length of one
					query.lineFrom = query.lineFrom || {};
					query.lineFrom.$lte = filter.values[0];
					break;

				case 'wordpressId':
					// Values will always be an array with a length of one
					query.wordpressId = filter.values[0];
					break;

				default:
					break;}

		});
	}

	return query;
};


var getCommentGroupId = function getCommentGroupId(commentGroup) {
	var id = '';
	commentGroup.comments.forEach(function (comment) {
		id += /* istanbul ignore next */'-' + comment._id;
	});
	return id.slice(1);
};


var parseCommentsToCommentGroups = function parseCommentsToCommentGroups(comments) {
	var commentGroups = [];
	// Make comment groups from comments
	var isInCommentGroup = false;
	comments.forEach(function (comment) {
		isInCommentGroup = false;
		if ('work' in comment) {
			commentGroups.forEach(function (commentGroup) {
				if (
				comment.work.title === commentGroup.work.title &&
				comment.subwork.n === commentGroup.subwork.n &&
				comment.lineFrom === commentGroup.lineFrom &&
				comment.lineTo === commentGroup.lineTo)
				{
					isInCommentGroup = true;
					commentGroup.comments.push(comment);
				}
			});

			if (!isInCommentGroup) {
				var ref = /* istanbul ignore next */void 0;

				if (comment.work.title === 'Homeric Hymns') {
					ref = /* istanbul ignore next */'Hymns ' + comment.subwork.n + '.' + comment.lineFrom;
				} else {
					ref = /* istanbul ignore next */comment.work.title + ' ' + comment.subwork.n + '.' + comment.lineFrom;
				}

				commentGroups.push({
					ref: ref,
					selectedLemmaEdition: {
						lines: [] },

					work: comment.work,
					subwork: comment.subwork,
					lineFrom: comment.lineFrom,
					lineTo: comment.lineTo,
					nLines: comment.nLines,
					comments: [comment] });

			}
		} else {
			console.log( /* istanbul ignore next */'Review comment ' + comment._id + ' metadata');
		}
	});

	// Unique commenters for each comment group
	commentGroups.forEach(function (commentGroup, commentGroupIndex) {
		// let isInCommenters = false;
		var commenters = [];
		// const commenterSubscription = Meteor.subscribe('commenters', Session.get('tenantId'));
		commentGroup.comments.forEach(function (comment, commentIndex) {
			// isInCommenters = false;

			comment.commenters.forEach(function (commenter, i) {
				var commenterRecord = /* istanbul ignore next */_commenters2.default.findOne({
					slug: commenter.slug });

				if (commenterRecord) {
					commentGroups[commentGroupIndex].comments[commentIndex].commenters[i] = commenterRecord;

					// get commenter avatar
					if (commenterRecord.avatar) {
						commenterRecord.avatar = commenterRecord.avatar;
					}

					// add to the unique commenter set
					if (commenters.some(function (c) /* istanbul ignore next */{return c.slug === commenter.slug;})) {
						// isInCommenters = true;
					} else {
						commenters.push(commenterRecord);
					}
				}
			});
		});
		commentGroups[commentGroupIndex].commenters = commenters;

		commentGroup._id = getCommentGroupId(commentGroup);
	});

	return commentGroups;
}; /* istanbul ignore next */exports.

createQueryFromFilters = createQueryFromFilters; /* istanbul ignore next */exports.parseCommentsToCommentGroups = parseCommentsToCommentGroups; /* istanbul ignore next */exports.getCommentGroupId = getCommentGroupId;