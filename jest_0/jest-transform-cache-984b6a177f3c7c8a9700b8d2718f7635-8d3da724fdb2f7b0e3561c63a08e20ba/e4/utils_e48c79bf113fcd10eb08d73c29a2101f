/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_kadiraDochead = require('meteor/kadira:dochead');


var /* istanbul ignore next */_config = require('./_config/_config.js'); /* istanbul ignore next */var _config2 = _interopRequireDefault(_config);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


var Utils = {
	isReady: function /* istanbul ignore next */isReady(sub) {
		if (sub) {
			return FlowRouter.subsReady(sub);
		}
		return FlowRouter.subsReady();
	},
	prettyDate: function /* istanbul ignore next */prettyDate(date) {
		if ( /* istanbul ignore next */_config2.default.dateFormat) {
			return moment(date).format( /* istanbul ignore next */_config2.default.dateFormat);
		}
		return moment(date).format('D/M/YYYY');
	},
	timeSince: function /* istanbul ignore next */timeSince(date) {
		var interval = /* istanbul ignore next */void 0;
		var seconds = Math.floor((new Date() - date) / 1000);
		interval = Math.floor(seconds / 31536000);
		if (interval > 1) {
			return (/* istanbul ignore next */interval + ' years ago');
		}
		interval = Math.floor(seconds / 2592000);
		if (interval > 1) {
			return (/* istanbul ignore next */interval + ' months ago');
		}
		interval = Math.floor(seconds / 86400);
		if (interval > 1) {
			return (/* istanbul ignore next */interval + ' days ago');
		}
		interval = Math.floor(seconds / 3600);
		if (interval > 1) {
			return (/* istanbul ignore next */interval + ' hours ago');
		}
		interval = Math.floor(seconds / 60);
		if (interval > 1) {
			return (/* istanbul ignore next */interval + ' minutes ago');
		}
		return 'just now';
	},
	trunc: function /* istanbul ignore next */trunc(str, length) {
		var ending = ' ...';
		var trimLen = length;
		str = str.replace(/<(?:.|\n)*?>/gm, '');

		if (trimLen == null) {
			trimLen = 100;
		}

		if (str.length > length) {
			return str.substring(0, length - ending.length) + ending;
		}

		return str;
	},

	isMobile: function /* istanbul ignore next */isMobile() {
		/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	},
	loginRequired: function /* istanbul ignore next */loginRequired() {
		Router.go('/sign-in');
	},
	scrollToTop: function /* istanbul ignore next */scrollToTop() {
		$('html,body').animate({
			scrollTop: $('body').offset().top },
		500);
	},
	scrollToElem: function /* istanbul ignore next */scrollToElem() {
		$('html,body').animate({
			scrollTop: $(selector).offset().top },
		500);
	},
	initHeadroom: function /* istanbul ignore next */initHeadroom() {
		var headroom = new Headroom(document.getElementById('header'));
		if (headroom) {
			return headroom.init();
		}
		return false;
	},
	capitalize: function /* istanbul ignore next */capitalize(str) {
		var capitalized = str.charAt(0).toUpperCase() + str.slice(1);
		return capitalized;
	},
	sortRevisions: function /* istanbul ignore next */sortRevisions(a, b) {
		if (a.updated && b.updated) {
			if (a.updated < b.updated) {
				return -1;
			} else if (a.updated > b.updated) {
				return 1;
			}
			return 0;
		}
		return 0;
	},
	defaultCmp: function defaultCmp(a, b) {
		if (a === b) return 0;
		return a < b ? -1 : 1;
	},
	getCmpFunc: function /* istanbul ignore next */getCmpFunc(primer, reverse) {
		var dfc = Utils.defaultCmp;
		var cmp = Utils.defaultCmp;
		if (primer) {
			cmp = function /* istanbul ignore next */cmp(a, b) {// eslint-disable-line
				return dfc(primer(a), primer(b));
			};
		}
		if (reverse) {
			return function (a, b) {// eslint-disable-line
				return -1 * cmp(a, b);
			};
		}
		return cmp;
	},
	sortBy: function sort() {
		var fields = [];
		var nFields = arguments.length;
		var field = /* istanbul ignore next */void 0;
		var name = /* istanbul ignore next */void 0;
		var cmp = /* istanbul ignore next */void 0;

		// preprocess sorting options
		for (var i = 0; i < nFields; i++) {
			field = arguments[i]; // eslint-disable-line

			if (typeof field === 'string') {
				name = field;
				cmp = Utils.defaultCmp;
			} else {
				name = field.name;
				cmp = Utils.getCmpFunc(field.primer, field.reverse);
			}
			fields.push({
				name: name,
				cmp: cmp });

		}

		// final comparison function
		return function (A, B) {
			var result = /* istanbul ignore next */void 0;

			for (var _i = 0; _i < nFields; _i++) {
				result = 0;
				field = fields[_i];
				name = field.name;

				result = field.cmp(A[name], B[name]);
				if (result !== 0) break;
			}
			return result;
		};
	}, /* istanbul ignore next */
	setBaseDocMeta: function setBaseDocMeta() {
		Utils.setMetaTag('name', 'url', 'content', location.href);
		Utils.setMetaTag('name', 'twitter:card', 'content', 'summary');
		Utils.setMetaTag('name', 'twitter:url', 'content', location.href);
		if ('serviceConfigurations' in Meteor.settings && 'facebook' in Meteor.settings.serviceConfigurations) {
			Utils.setMetaTag('property', 'fb:app_id', 'content', Meteor.settings.serviceConfigurations.facebook.appId);
		}
		Utils.setMetaTag('property', 'og:url', 'content', location.href);
		Utils.setMetaTag('property', 'og:type', 'content', 'website');
		Utils.setLinkTag('rel', 'canonical', 'href', location.href);
	}, /* istanbul ignore next */
	setTitle: function setTitle(title) {
		/* istanbul ignore next */_kadiraDochead.DocHead.setTitle( /* istanbul ignore next */'' + title);
		Utils.setMetaTag('property', 'og:title', 'content', title);
		Utils.setMetaTag('property', 'og:site_name', 'content', title);
		Utils.setMetaTag('property', 'og:local', 'content', 'en_US');
		Utils.setMetaTag('property', 'twitter:title', 'content', title);
		Utils.setMetaTag('itemprop', 'title', 'content', title);
	}, /* istanbul ignore next */
	setDescription: function setDescription(description) {
		Utils.setMetaTag('name', 'description', 'content', description);
		Utils.setMetaTag('property', 'og:description', 'content', description);
		Utils.setMetaTag('property', 'twitter:description', 'content', description);
		Utils.setMetaTag('itemprop', 'description', 'content', description);
	}, /* istanbul ignore next */
	setMetaImage: function setMetaImage() {/* istanbul ignore next */var imageSrc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		if (imageSrc) {
			Utils.setMetaTag('property', 'og:image', 'content', imageSrc);
			Utils.setMetaTag('property', 'twitter:image', 'content', imageSrc);
			Utils.setMetaTag('itemprop', 'image', 'content', imageSrc);
		} else {
			Utils.setMetaTag('property', 'og:image', 'content', /* istanbul ignore next */location.origin + '/images/hector.jpg');
			Utils.setMetaTag('property', 'twitter:image', 'content', /* istanbul ignore next */location.origin + '/images/hector.jpg');
			Utils.setMetaTag('itemprop', 'image', 'content', /* istanbul ignore next */location.origin + '/images/hector.jpg');
		}
	}, /* istanbul ignore next */
	setMetaTag: function setMetaTag(attr1, key, attr2, val) {
		var metaInfo = {};
		metaInfo[attr1] = key;
		metaInfo[attr2] = val;
		if ($( /* istanbul ignore next */'meta[' + attr1 + '="' + key + '"]').length) {
			$( /* istanbul ignore next */'meta[' + attr1 + '="' + key + '"]').attr(attr2, val);
		} else {
			/* istanbul ignore next */_kadiraDochead.DocHead.addMeta(metaInfo);
		}
	}, /* istanbul ignore next */
	setLinkTag: function setLinkTag(attr1, key, attr2, val) {
		var linkInfo = {};
		linkInfo[attr1] = key;
		linkInfo[attr2] = val;
		if ($( /* istanbul ignore next */'link[' + attr1 + '="' + key + '"]').length) {
			$( /* istanbul ignore next */'link[' + attr1 + '="' + key + '"]').attr(attr2, val);
		} else {
			/* istanbul ignore next */_kadiraDochead.DocHead.addLink(linkInfo);
		}
	}, /* istanbul ignore next */
	replaceLast: function replaceLast(str, find, replace) {
		var index = str.lastIndexOf(find);
		if (index >= 0) {
			return str.substring(0, index) + replace + str.substring(index + find.length);
		}
		return str.toString();
	}, /* istanbul ignore next */
	getEntityData: function getEntityData(entity, key) {
		var foundItem = entity.data.mention._root.entries.find(function (item) /* istanbul ignore next */{return item[0] === key;});
		return foundItem[1];
	} }; // lib
/* istanbul ignore next */exports.default =

Utils;