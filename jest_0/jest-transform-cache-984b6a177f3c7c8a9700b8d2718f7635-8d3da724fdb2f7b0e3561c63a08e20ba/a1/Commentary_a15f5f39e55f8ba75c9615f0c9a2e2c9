/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_session = require('meteor/session');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');

var /* istanbul ignore next */_getMuiTheme = require('material-ui/styles/getMuiTheme'); /* istanbul ignore next */var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);
var /* istanbul ignore next */_throttleDebounce = require('throttle-debounce');


var /* istanbul ignore next */_comments = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/comments'); /* istanbul ignore next */var _comments2 = _interopRequireDefault(_comments);
var /* istanbul ignore next */_settings = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/settings'); /* istanbul ignore next */var _settings2 = _interopRequireDefault(_settings);
var /* istanbul ignore next */_works = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/works'); /* istanbul ignore next */var _works2 = _interopRequireDefault(_works);


var /* istanbul ignore next */_CommentGroup = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/layouts/commentary/CommentGroup'); /* istanbul ignore next */var _CommentGroup2 = _interopRequireDefault(_CommentGroup);
var /* istanbul ignore next */_ContextPanel = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/layouts/commentary/ContextPanel'); /* istanbul ignore next */var _ContextPanel2 = _interopRequireDefault(_ContextPanel);


var /* istanbul ignore next */_InfiniteScroll = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/shared/InfiniteScroll'); /* istanbul ignore next */var _InfiniteScroll2 = _interopRequireDefault(_InfiniteScroll);
var /* istanbul ignore next */_FilterWidget = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/FilterWidget'); /* istanbul ignore next */var _FilterWidget2 = _interopRequireDefault(_FilterWidget);


var /* istanbul ignore next */_utils = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/utils'); /* istanbul ignore next */var _utils2 = _interopRequireDefault(_utils);
var /* istanbul ignore next */_muiTheme = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/muiTheme'); /* istanbul ignore next */var _muiTheme2 = _interopRequireDefault(_muiTheme);


var /* istanbul ignore next */_helpers = require('./helpers'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // api:
// layouts:
// components:
// lib
// helpers:
var Commentary = function (_React$Component) {_inherits(Commentary, _React$Component);














































	function /* istanbul ignore next */Commentary(props) {/* istanbul ignore next */_classCallCheck(this, Commentary);var _this = _possibleConstructorReturn(this, (Commentary.__proto__ || Object.getPrototypeOf(Commentary)).call(this,
		props));

		/* istanbul ignore next */_this.state = {
			contextCommentGroupSelected: {},
			contextPanelOpen: false,
			discussionSelected: {},
			discussionPanelOpen: false,
			referenceLemma: [],
			hideLemmaPanel: false,
			referenceLemmaSelectedEdition: {
				lines: [] },

			commentLemmaGroups: [],
			commentGroups: [] };


		// methods:
		/* istanbul ignore next */_this.toggleLemmaEdition = /* istanbul ignore next */_this.toggleLemmaEdition.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.removeLemma = /* istanbul ignore next */_this.removeLemma.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.returnLemma = /* istanbul ignore next */_this.returnLemma.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.searchReferenceLemma = /* istanbul ignore next */_this.searchReferenceLemma.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.showContextPanel = /* istanbul ignore next */_this.showContextPanel.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.closeContextPanel = /* istanbul ignore next */_this.closeContextPanel.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.setContextScrollPosition = /* istanbul ignore next */_this.setContextScrollPosition.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.setPageTitleAndMeta = /* istanbul ignore next */_this.setPageTitleAndMeta.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.loadMoreComments = /* istanbul ignore next */_this.loadMoreComments.bind( /* istanbul ignore next */_this);
		/* istanbul ignore next */_this.renderNoCommentsOrLoading = /* istanbul ignore next */_this.renderNoCommentsOrLoading.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;
	}_createClass(Commentary, [{ key: 'getChildContext', value: function getChildContext()

		{
			return { muiTheme: /* istanbul ignore next */(0, _getMuiTheme2.default)( /* istanbul ignore next */_muiTheme2.default) };
		} }, { key: 'setPageTitleAndMeta', value: function setPageTitleAndMeta()

		{/* istanbul ignore next */var _props =

			this.props,filters = _props.filters,settings = _props.settings,commentGroups = _props.commentGroups;

			var title = '';
			var values = [];
			var work = 'Commentary';
			var subwork = null;
			var lineFrom = 0;
			var lineTo = 0;
			var metaSubject = 'Commentaries on Classical Texts';
			var description = '';

			if (!settings) {
				return null;
			}

			filters.forEach(function (filter) {
				values = [];
				switch (filter.key) {
					case 'works':
						filter.values.forEach(function (value) {
							values.push(value.slug);
						});
						work = values.join(', ');
						break;

					case 'subworks':
						filter.values.forEach(function (value) {
							values.push(value.n);
						});
						subwork = values.join(', ');
						break;

					case 'lineFrom':
						lineFrom = filter.values[0];
						break;

					case 'lineTo':
						lineTo = filter.values[0];
						break;
					default:
						break;}

			});

			var foundWork = /* istanbul ignore next */_works2.default.findOne({ slug: work });
			var workTitle = foundWork ? foundWork.title : work;

			title = workTitle;
			if (subwork) title = /* istanbul ignore next */title + ' ' + subwork;
			if (lineFrom) {
				if (lineTo) {
					title = /* istanbul ignore next */title + '.' + lineFrom + '-' + lineTo;
				} else {
					title = /* istanbul ignore next */title + '.' + lineFrom;
				}
			} else if (lineTo) {
				title = /* istanbul ignore next */title + '.' + lineTo;
			} else {
				title = /* istanbul ignore next */'' + title;
			}
			title = /* istanbul ignore next */title + ' | ' + (settings.title || '');

			metaSubject = /* istanbul ignore next */metaSubject + ', ' + title + ', Philology';

			if (
			commentGroups.length &&
			commentGroups[0].comments.length &&
			commentGroups[0].comments[0].revisions.length)
			{
				description = /* istanbul ignore next */_utils2.default.trunc(commentGroups[0].comments[0].revisions[0].text, 120);
			}

			/* istanbul ignore next */_utils2.default.setMetaTag('name', 'subject', 'content', metaSubject);
			/* istanbul ignore next */_utils2.default.setTitle(title);
			/* istanbul ignore next */_utils2.default.setDescription( /* istanbul ignore next */'Commentary on ' + title + ': ' + description);
			/* istanbul ignore next */_utils2.default.setMetaImage();
		} }, { key: 'toggleLemmaEdition', value: function toggleLemmaEdition()

		{
			this.setState({
				selectedLemmaEdition: {} });

		} }, { key: 'removeLemma', value: function removeLemma()

		{
			if (this.state.hideLemmaPanel === false) {
				this.setState({
					hideLemmaPanel: true });

			}
		} }, { key: 'returnLemma', value: function returnLemma()

		{
			if (this.state.hideLemmaPanel === true) {
				this.setState({
					hideLemmaPanel: false });

			}
		} }, { key: 'searchReferenceLemma', value: function searchReferenceLemma()

		{
			this.setState({
				referenceLemma: [],
				referenceLemmaSelectedEdition: {
					lines: [] } });


		} }, { key: 'showContextPanel', value: function showContextPanel(

		commentGroup) {
			this.setState({
				contextCommentGroupSelected: commentGroup,
				contextPanelOpen: true });

		} }, { key: 'closeContextPanel', value: function closeContextPanel()

		{
			this.setState({
				contextCommentGroupSelected: {},
				contextPanelOpen: false });

		} }, { key: 'setContextScrollPosition', value: function setContextScrollPosition(

		index) {
			this.setState({
				commentLemmaIndex: index });

		} }, { key: 'loadMoreComments', value: function loadMoreComments()

		{
			if (
			!this.props.isOnHomeView &&
			this.props.commentGroups.length &&
			this.props.isMoreComments)
			{
				this.props.loadMoreComments();
			}
		} }, { key: 'renderNoCommentsOrLoading', value: function renderNoCommentsOrLoading()

		{/* istanbul ignore next */var _props2 =
			this.props,isOnHomeView = _props2.isOnHomeView,isMoreComments = _props2.isMoreComments,commentGroups = _props2.commentGroups,ready = _props2.ready;

			if (
			!isOnHomeView)
			{
				if (ready && commentGroups.length === 0) {
					return (
						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'no-commentary-wrap' },
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: 'no-commentary no-results' }, /* istanbul ignore next */'No commentary available for the current search.')));




				} else if (isMoreComments) {
					return (
						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'ahcip-spinner commentary-loading' },
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'double-bounce1' }),
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'double-bounce2' })));


				}
			}

			return '';
		} }, { key: 'render', value: function render()

		{/* istanbul ignore next */var _this2 = this;var _props3 =

			this.props,commentGroups = _props3.commentGroups,isOnHomeView = _props3.isOnHomeView,toggleSearchTerm = _props3.toggleSearchTerm,showLoginModal = _props3.showLoginModal,filters = _props3.filters; /* istanbul ignore next */var _state =
			this.state,contextPanelOpen = _state.contextPanelOpen,contextCommentGroupSelected = _state.contextCommentGroupSelected,commentLemmaIndex = _state.commentLemmaIndex;

			if (!isOnHomeView) {
				this.setPageTitleAndMeta();
			}

			if (!commentGroups) {
				return null;
			}

			return (
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'commentary-primary content ' },

					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InfiniteScroll2.default, /* istanbul ignore next */{
							endPadding: 120,
							loadMore: /* istanbul ignore next */(0, _throttleDebounce.debounce)(1000, this.loadMoreComments) },

						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'commentary-comments commentary-comment-groups' },
							commentGroups.map(function (commentGroup) /* istanbul ignore next */{return (
									/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentGroup2.default, /* istanbul ignore next */{
										key: commentGroup._id,
										commentGroupIndex: commentGroup._id,
										commentGroup: commentGroup,
										contextPanelOpen: contextPanelOpen,
										showContextPanel: /* istanbul ignore next */_this2.showContextPanel,
										setContextScrollPosition: /* istanbul ignore next */_this2.setContextScrollPosition,
										toggleSearchTerm: toggleSearchTerm,
										showLoginModal: showLoginModal,
										filters: filters,
										isOnHomeView: isOnHomeView }));}))),






					this.renderNoCommentsOrLoading(),

					'work' in contextCommentGroupSelected ?
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ContextPanel2.default, /* istanbul ignore next */{
						open: contextPanelOpen,
						closeContextPanel: this.closeContextPanel,
						commentGroup: contextCommentGroupSelected,
						commentLemmaIndex: commentLemmaIndex }) :

					'',
					!isOnHomeView ?
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FilterWidget2.default, /* istanbul ignore next */{
						filters: filters,
						toggleSearchTerm: toggleSearchTerm }) :

					''));


		} }]);return Commentary;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */Commentary.propTypes = { skip: /* istanbul ignore next */_react2.default.PropTypes.number.isRequired, // eslint-disable-line react/no-unused-prop-types
	limit: /* istanbul ignore next */_react2.default.PropTypes.number.isRequired, // eslint-disable-line react/no-unused-prop-types
	isOnHomeView: /* istanbul ignore next */_react2.default.PropTypes.bool, filters: /* istanbul ignore next */_react2.default.PropTypes.array, showLoginModal: /* istanbul ignore next */_react2.default.PropTypes.func, toggleSearchTerm: /* istanbul ignore next */_react2.default.PropTypes.func, loadMoreComments: /* istanbul ignore next */_react2.default.PropTypes.func, // from createContainer:
	commentGroups: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({ work: /* istanbul ignore next */_react2.default.PropTypes.shape({ slug: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, title: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired }), subwork: /* istanbul ignore next */_react2.default.PropTypes.shape({ n: /* istanbul ignore next */_react2.default.PropTypes.number.isRequired }), lineFrom: /* istanbul ignore next */_react2.default.PropTypes.number.isRequired, lineTo: /* istanbul ignore next */_react2.default.PropTypes.number, commenters: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({ _id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, slug: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired, avatar: /* istanbul ignore next */_react2.default.PropTypes.shape({ src: /* istanbul ignore next */_react2.default.PropTypes.string }) })) })), isMoreComments: /* istanbul ignore next */_react2.default.PropTypes.bool, ready: /* istanbul ignore next */_react2.default.PropTypes.bool, settings: /* istanbul ignore next */_react2.default.PropTypes.shape({ title: /* istanbul ignore next */_react2.default.PropTypes.string }) }; /* istanbul ignore next */Commentary.defaultProps = { isOnHomeView: false, filters: null, showLoginModal: null, toggleSearchTerm: null, loadMoreComments: null }; /* istanbul ignore next */Commentary.childContextTypes = { muiTheme: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =
/* istanbul ignore next */(0, _reactMeteorData.createContainer)(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var filters = _ref.filters,skip = _ref.skip,limit = _ref.limit;

	var commentGroups = [];

	var query = /* istanbul ignore next */(0, _helpers.createQueryFromFilters)(filters);
	query.tenantId = /* istanbul ignore next */_session.Session.get('tenantId');

	// SUBSCRIPTIONS:
	var commentsSub = /* istanbul ignore next */_meteor.Meteor.subscribe('comments', query, skip, limit);
	var isMoreComments = true;

	// Update textsearch in query for client minimongo
	if ('$text' in query) {
		var textsearch = new RegExp(query.$text, 'i');
		query.$or = [
		{ 'revisions.title': textsearch },
		{ 'revisions.text': textsearch }];

		delete query.$text;
	}

	// FETCH DATA:
	var comments = /* istanbul ignore next */_comments2.default.find(query, {
		sort: {
			'work.order': 1,
			'subwork.n': 1,
			lineFrom: 1,
			nLines: -1 } }).

	fetch();

	commentGroups = /* istanbul ignore next */(0, _helpers.parseCommentsToCommentGroups)(comments);

	if (comments.length < limit) {
		isMoreComments = false;
	}

	var settingsHandle = /* istanbul ignore next */_meteor.Meteor.subscribe('settings.tenant', /* istanbul ignore next */_session.Session.get('tenantId'));

	return {
		commentGroups: commentGroups,
		isMoreComments: isMoreComments,
		ready: commentsSub.ready(),
		settings: settingsHandle.ready() ? /* istanbul ignore next */_settings2.default.findOne() : {} };


}, Commentary);