/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_session = require('meteor/session');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');
var /* istanbul ignore next */_random = require('meteor/random');
var /* istanbul ignore next */_RaisedButton = require('material-ui/RaisedButton'); /* istanbul ignore next */var _RaisedButton2 = _interopRequireDefault(_RaisedButton);
var /* istanbul ignore next */_FontIcon = require('material-ui/FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);
var /* istanbul ignore next */_IconButton = require('material-ui/IconButton'); /* istanbul ignore next */var _IconButton2 = _interopRequireDefault(_IconButton);
var /* istanbul ignore next */_Snackbar = require('material-ui/Snackbar'); /* istanbul ignore next */var _Snackbar2 = _interopRequireDefault(_Snackbar);

var /* istanbul ignore next */_getMuiTheme = require('material-ui/styles/getMuiTheme'); /* istanbul ignore next */var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var /* istanbul ignore next */_formsyReact = require('formsy-react'); /* istanbul ignore next */var _formsyReact2 = _interopRequireDefault(_formsyReact);
var /* istanbul ignore next */_lib = require('formsy-material-ui/lib');
var /* istanbul ignore next */_reactBootstrap = require('react-bootstrap');



var /* istanbul ignore next */_reactSelect = require('react-select'); /* istanbul ignore next */var _reactSelect2 = _interopRequireDefault(_reactSelect);
var /* istanbul ignore next */_draftJs = require('draft-js');
var /* istanbul ignore next */_draftJsPluginsEditor = require('draft-js-plugins-editor'); /* istanbul ignore next */var _draftJsPluginsEditor2 = _interopRequireDefault(_draftJsPluginsEditor);
var /* istanbul ignore next */_draftJsExportHtml = require('draft-js-export-html');
var /* istanbul ignore next */_immutable = require('immutable');
var /* istanbul ignore next */_immutabilityHelper = require('immutability-helper'); /* istanbul ignore next */var _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);
var /* istanbul ignore next */_draftConvert = require('draft-convert');
var /* istanbul ignore next */_draftJsSingleLinePlugin = require('draft-js-single-line-plugin'); /* istanbul ignore next */var _draftJsSingleLinePlugin2 = _interopRequireDefault(_draftJsSingleLinePlugin);
var /* istanbul ignore next */_draftJsMentionPlugin = require('draft-js-mention-plugin'); /* istanbul ignore next */var _draftJsMentionPlugin2 = _interopRequireDefault(_draftJsMentionPlugin);
var /* istanbul ignore next */_draftJsInlineToolbarPlugin = require('draft-js-inline-toolbar-plugin'); /* istanbul ignore next */var _draftJsInlineToolbarPlugin2 = _interopRequireDefault(_draftJsInlineToolbarPlugin);
var /* istanbul ignore next */_draftJsButtons = require('draft-js-buttons');









var /* istanbul ignore next */_commenters = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/commenters'); /* istanbul ignore next */var _commenters2 = _interopRequireDefault(_commenters);
var /* istanbul ignore next */_keywords = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/keywords'); /* istanbul ignore next */var _keywords2 = _interopRequireDefault(_keywords);
var /* istanbul ignore next */_referenceWorks = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/referenceWorks'); /* istanbul ignore next */var _referenceWorks2 = _interopRequireDefault(_referenceWorks);


var /* istanbul ignore next */_ListDnD = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/shared/ListDnD');


var /* istanbul ignore next */_muiTheme = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/muiTheme'); /* istanbul ignore next */var _muiTheme2 = _interopRequireDefault(_muiTheme);
var /* istanbul ignore next */_utils = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/utils'); /* istanbul ignore next */var _utils2 = _interopRequireDefault(_utils);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// Create toolbar plugin for editor
// lib:
// api
// https://github.com/JedWatson/react-select
var singleLinePlugin = /* istanbul ignore next */(0, _draftJsSingleLinePlugin2.default)(); // components
var inlineToolbarPlugin = /* istanbul ignore next */(0, _draftJsInlineToolbarPlugin2.default)({ structure: [/* istanbul ignore next */_draftJsButtons.BoldButton, /* istanbul ignore next */_draftJsButtons.ItalicButton, /* istanbul ignore next */_draftJsButtons.UnderlineButton, /* istanbul ignore next */_draftJsInlineToolbarPlugin.Separator, /* istanbul ignore next */_draftJsButtons.UnorderedListButton, /* istanbul ignore next */_draftJsButtons.OrderedListButton, /* istanbul ignore next */_draftJsButtons.BlockquoteButton] }); /* istanbul ignore next */var







InlineToolbar = inlineToolbarPlugin.InlineToolbar;


// Keyword Mentions
var keywordMentionPlugin = /* istanbul ignore next */(0, _draftJsMentionPlugin2.default)();

// Comments Cross Reference Mentions
var commentsMentionPlugin = /* istanbul ignore next */(0, _draftJsMentionPlugin2.default)({
	mentionTrigger: '#' });


var ListGroupItemDnD = /* istanbul ignore next */(0, _ListDnD.creatListGroupItemDnD)('referenceWorkBlocks');

function _getSuggestionsFromComments(comments) {
	var suggestions = [];

	// if there are comments:
	if (comments.length) {

		// loop through all comments
		// add suggestion for each comment
		comments.forEach(function (comment) {

			// get the most recent revision
			var revision = comment.revisions[comment.revisions.length - 1];

			var suggestion = {
				// create suggestio name:
				name: /* istanbul ignore next */'"' + revision.title + '" -',

				// set link for suggestion
				link: /* istanbul ignore next */'/commentary?_id=' + comment._id,

				// set id for suggestion
				id: comment._id };


			// loop through commenters and add them to suggestion name
			comment.commenters.forEach(function (commenter, i) {
				if (i === 0) suggestion.name += /* istanbul ignore next */' ' + commenter.name;else
				suggestion.name += /* istanbul ignore next */', ' + commenter.name;
			});

			suggestions.push(suggestion);
		});
	}
	return suggestions;
}


var AddComment = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'AddComment',

	propTypes: {
		selectedLineFrom: /* istanbul ignore next */_react2.default.PropTypes.number,
		submitForm: /* istanbul ignore next */_react2.default.PropTypes.func.isRequired,
		commentersOptions: /* istanbul ignore next */_react2.default.PropTypes.array,
		keywordsOptions: /* istanbul ignore next */_react2.default.PropTypes.array,
		keyideasOptions: /* istanbul ignore next */_react2.default.PropTypes.array,
		referenceWorkOptions: /* istanbul ignore next */_react2.default.PropTypes.array },


	childContextTypes: {
		muiTheme: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }, /* istanbul ignore next */


	getDefaultProps: function getDefaultProps() {
		return {
			selectedLineFrom: null };

	}, /* istanbul ignore next */

	getInitialState: function getInitialState() {
		return {
			titleEditorState: /* istanbul ignore next */_draftJs.EditorState.createEmpty(),
			textEditorState: /* istanbul ignore next */_draftJs.EditorState.createEmpty(),

			commenterValue: null,
			titleValue: '',
			textValue: '',
			referenceWorks: [],
			keywordsValue: null,
			keyideasValue: null,

			snackbarOpen: false,
			snackbarMessage: '',
			keywordSuggestions: /* istanbul ignore next */(0, _immutable.fromJS)([]),
			commentsSuggestions: /* istanbul ignore next */(0, _immutable.fromJS)([]) };

	}, /* istanbul ignore next */

	getChildContext: function getChildContext() {
		return { muiTheme: /* istanbul ignore next */(0, _getMuiTheme2.default)( /* istanbul ignore next */_muiTheme2.default) };
	}, /* istanbul ignore next */

	_enableButton: function _enableButton() {
		this.setState({
			canSubmit: true });

	}, /* istanbul ignore next */

	_disableButton: function _disableButton() {
		this.setState({
			canSubmit: false });

	}, /* istanbul ignore next */

	// --- BEGIN FORM HANDLE --- //

	onTitleChange: function onTitleChange(titleEditorState) {
		var titleHtml = /* istanbul ignore next */(0, _draftJsExportHtml.stateToHTML)(this.state.titleEditorState.getCurrentContent());
		var title = jQuery(titleHtml).text();
		this.setState({
			titleEditorState: titleEditorState,
			titleValue: title });

	}, /* istanbul ignore next */

	onTextChange: function onTextChange(textEditorState) {
		var textHtml = /* istanbul ignore next */(0, _draftJsExportHtml.stateToHTML)(this.state.textEditorState.getCurrentContent());

		this.setState({
			textEditorState: textEditorState,
			textValue: textHtml });

	}, /* istanbul ignore next */

	onKeywordsValueChange: function onKeywordsValueChange(keywords) {
		this.setState({
			keywordsValue: keywords });

	}, /* istanbul ignore next */

	onKeyideasValueChange: function onKeyideasValueChange(keyidea) {
		this.setState({
			keyideasValue: keyidea });

	}, /* istanbul ignore next */

	onReferenceWorksValueChange: function onReferenceWorksValueChange(referenceWork) {
		var referenceWorks = this.state.referenceWorks;
		referenceWorks[referenceWork.i].referenceWorkId = referenceWork.value;

		this.setState({
			referenceWorks: referenceWorks });

	}, /* istanbul ignore next */

	onNewOptionCreator: function onNewOptionCreator(newOption) {
		return {
			label: newOption.label,
			value: newOption.label };

	}, /* istanbul ignore next */

	_onKeywordSearchChange: function _onKeywordSearchChange(_ref) {/* istanbul ignore next */var value = _ref.value;
		var keywordSuggestions = [];
		var keywords = this.props.keywordsOptions.concat(this.props.keyideasOptions);
		keywords.forEach(function (keyword) {
			keywordSuggestions.push({
				name: keyword.label,
				link: /* istanbul ignore next */'/keywords/' + keyword.slug });

		});

		this.setState({
			keywordSuggestions: /* istanbul ignore next */(0, _draftJsMentionPlugin.defaultSuggestionsFilter)(value, /* istanbul ignore next */(0, _immutable.fromJS)(keywordSuggestions)) });

	}, /* istanbul ignore next */

	_onCommentsSearchChange: function _onCommentsSearchChange(_ref2) {/* istanbul ignore next */var _this = this;var value = _ref2.value;
		// use Meteor call method, as comments are not available on clint app
		/* istanbul ignore next */_meteor.Meteor.call('comments.getSuggestions', value, function (err, res) {
			// handle error:
			if (err) throw new /* istanbul ignore next */_meteor.Meteor.Error(err);

			// handle response:
			var commentsSuggestions = _getSuggestionsFromComments(res);

			/* istanbul ignore next */_this.setState({
				commentsSuggestions: /* istanbul ignore next */(0, _immutable.fromJS)(commentsSuggestions) });

		});

	}, /* istanbul ignore next */

	shouldKeyDownEventCreateNewOption: function shouldKeyDownEventCreateNewOption(sig) {
		if (sig.keyCode === 13 ||
		sig.keyCode === 188) {
			return true;
		}
		return false;
	}, /* istanbul ignore next */

	isOptionUnique: function isOptionUnique(newOption) {/* istanbul ignore next */var _props =
		this.props,keywordsOptions = _props.keywordsOptions,keyideasOptions = _props.keyideasOptions;
		var keywordsValue = this.state.keywordsValue ? this.state.keywordsValue : [];
		var keyideasValue = this.state.keyideasValue ? this.state.keyideasValue : [];
		var BreakException = {};
		try {
			keywordsOptions.forEach(function (keywordsOption) {
				if (keywordsOption.label === newOption.option.label) throw BreakException;
			});
			keyideasOptions.forEach(function (keyideasOption) {
				if (keyideasOption.label === newOption.option.label) throw BreakException;
			});
			keywordsValue.forEach(function (keywordValue) {
				if (keywordValue.label === newOption.option.label) throw BreakException;
			});
			keyideasValue.forEach(function (keyideaValue) {
				if (keyideaValue.label === newOption.option.label) throw BreakException;
			});
		} catch (e) {
			if (e === BreakException) return false;
		}
		return true;
	}, /* istanbul ignore next */

	onCommenterValueChange: function onCommenterValueChange(comenter) {
		this.setState({
			commenterValue: comenter });

	}, /* istanbul ignore next */

	// --- END FORM HANDLE --- //

	// --- BEGIN SUBMIT / VALIDATION HANDLE --- //

	handleSubmit: function handleSubmit(data) {/* istanbul ignore next */var
		textEditorState = this.state.textEditorState;

		// TODO: form validation
		// TODO: Migrate to formsy components
		var error = this.validateStateForSubmit();
		this.showSnackBar(error);
		if (error.errors) {
			return false;
		}

		// create html from textEditorState's content
		var textHtml = /* istanbul ignore next */(0, _draftConvert.convertToHTML)({

			// performe necessary html transformations:
			entityToHTML: function /* istanbul ignore next */entityToHTML(entity, originalText) {

				// handle keyword mentions
				if (entity.type === 'mention') {
					return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ className: 'keyword-gloss', /* istanbul ignore next */'data-link': /* istanbul ignore next */_utils2.default.getEntityData(entity, 'link') }, originalText));
				}

				// handle hashtag / commets cross reference mentions
				if (entity.type === '#mention') {
					return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ className: 'comment-cross-ref', href: /* istanbul ignore next */_utils2.default.getEntityData(entity, 'link') }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ dangerouslySetInnerHTML: { __html: originalText } })));
				}
			} })(
		textEditorState.getCurrentContent());
		var textRaw = /* istanbul ignore next */(0, _draftJs.convertToRaw)(textEditorState.getCurrentContent());

		var key = /* istanbul ignore next */void 0;
		for (key in data) {// eslint-disable-line
			var params = key.split('_');
			params[0] = parseInt(params[0], 10);
			this.state.referenceWorks[params[0]][params[1]] = data[key];
		}

		this.props.submitForm(this.state, textHtml, textRaw);
	}, /* istanbul ignore next */

	showSnackBar: function showSnackBar(error) {/* istanbul ignore next */var _this2 = this;
		this.setState({
			snackbarOpen: error.errors,
			snackbarMessage: error.errorMessage });

		setTimeout(function () {
			/* istanbul ignore next */_this2.setState({
				snackbarOpen: false });

		}, 4000);
	}, /* istanbul ignore next */

	validateStateForSubmit: function validateStateForSubmit() {
		var errors = false;
		var errorMessage = 'Missing comment data:';
		if (!this.state.titleValue) {
			errors = true;
			errorMessage += ' title,';
		}
		if (this.state.textValue === '<p><br></p>' || !this.state.textValue) {
			errors = true;
			errorMessage += ' comment text,';
		}
		if (!this.props.selectedLineFrom) {
			errors = true;
			errorMessage += ' no line selected,';
		}
		if (!this.state.commenterValue) {
			errors = true;
			errorMessage += ' no commenter selected,';
		}
		if (errors === true) {
			errorMessage = errorMessage.slice(0, -1);
			errorMessage += '.';
		}
		return {
			errors: errors,
			errorMessage: errorMessage };

	}, /* istanbul ignore next */

	addReferenceWorkBlock: function addReferenceWorkBlock() {
		this.state.referenceWorks.push({ referenceWorkId: /* istanbul ignore next */_random.Random.id() });
		this.setState({
			referenceWorks: this.state.referenceWorks });

	}, /* istanbul ignore next */

	removeReferenceWorkBlock: function removeReferenceWorkBlock(i) {
		this.setState({
			referenceWorks: /* istanbul ignore next */(0, _immutabilityHelper2.default)(this.state.referenceWorks, { $splice: [[i, 1]] }) });

	}, /* istanbul ignore next */

	moveReferenceWorkBlock: function moveReferenceWorkBlock(dragIndex, hoverIndex) {/* istanbul ignore next */var
		introBlocks = this.state.introBlocks;
		var dragIntroBlock = introBlocks[dragIndex];

		this.setState( /* istanbul ignore next */(0, _immutabilityHelper2.default)(this.state, {
			referenceWorks: {
				$splice: [
				[dragIndex, 1],
				[hoverIndex, 0, dragIntroBlock]] } }));



	}, /* istanbul ignore next */


	// --- END SUBMIT / VALIDATION HANDLE --- //

	render: function render() {/* istanbul ignore next */var _this3 = this;var _state =
		this.state,revision = _state.revision,titleEditorState = _state.titleEditorState,keywordsValue = _state.keywordsValue,keyideasValue = _state.keyideasValue,referenceWorks = _state.referenceWorks,textEditorState = _state.textEditorState; /* istanbul ignore next */var _props2 =
		this.props,commentersOptions = _props2.commentersOptions,keywordsOptions = _props2.keywordsOptions,keyideasOptions = _props2.keyideasOptions,referenceWorkOptions = _props2.referenceWorkOptions;

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'comments lemma-panel-visible' },
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'comment-outer' },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_formsyReact2.default.Form, /* istanbul ignore next */{
							onValid: this._enableButton,
							onInvalid: this._disableButton,
							onValidSubmit: this.handleSubmit },

						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'article', /* istanbul ignore next */{
								className: 'comment commentary-comment paper-shadow ',
								style: { marginLeft: 0 } },

							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'comment-upper' },
								commentersOptions && commentersOptions.length ?
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactSelect2.default, /* istanbul ignore next */{
									name: 'commenter',
									id: 'commenter',
									required: false,
									options: commentersOptions,
									value: this.state.commenterValue,
									onChange: this.onCommenterValueChange,
									placeholder: 'Commentator...' }) :


								'',

								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h1', /* istanbul ignore next */{ className: 'add-comment-title' },
									/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_draftJsPluginsEditor2.default, /* istanbul ignore next */{
										editorState: this.state.titleEditorState,
										onChange: this.onTitleChange,
										placeholder: 'Comment title...',
										spellCheck: /* istanbul ignore next */true,
										stripPastedStyles: /* istanbul ignore next */true,
										plugins: [singleLinePlugin],
										blockRenderMap: singleLinePlugin.blockRenderMap })),


								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactSelect.Creatable, /* istanbul ignore next */{
									name: 'keywords',
									id: 'keywords',
									required: false,
									options: keywordsOptions,
									multi: /* istanbul ignore next */true,
									value: this.state.keywordsValue,
									onChange: this.onKeywordsValueChange,
									newOptionCreator: this.onNewOptionCreator,
									shouldKeyDownEventCreateNewOption: this.shouldKeyDownEventCreateNewOption,
									isOptionUnique: this.isOptionUnique,
									placeholder: 'Keywords...' }),

								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactSelect.Creatable, /* istanbul ignore next */{
									name: 'keyideas',
									id: 'keyideas',
									required: false,
									options: keyideasOptions,
									multi: /* istanbul ignore next */true,
									value: this.state.keyideasValue,
									onChange: this.onKeyideasValueChange,
									newOptionCreator: this.onNewOptionCreator,
									shouldKeyDownEventCreateNewOption: this.shouldKeyDownEventCreateNewOption,
									isOptionUnique: this.isOptionUnique,
									placeholder: 'Key ideas...' })),



							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
									className: 'comment-lower',
									style: { paddingTop: 20 } },

								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_draftJsPluginsEditor2.default, /* istanbul ignore next */{
									editorState: this.state.textEditorState,
									onChange: this.onTextChange,
									placeholder: 'Comment text...',
									spellCheck: /* istanbul ignore next */true,
									plugins: [keywordMentionPlugin, commentsMentionPlugin, inlineToolbarPlugin],
									ref: function /* istanbul ignore next */ref(element) {/* istanbul ignore next */_this3.editor = element;} }),



								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */keywordMentionPlugin.MentionSuggestions, /* istanbul ignore next */{
									onSearchChange: this._onKeywordSearchChange,
									suggestions: this.state.keywordSuggestions }),



								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */commentsMentionPlugin.MentionSuggestions, /* istanbul ignore next */{
									onSearchChange: this._onCommentsSearchChange,
									suggestions: this.state.commentsSuggestions }),


								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'comment-reference' },
									/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h4', /* istanbul ignore next */null, /* istanbul ignore next */'Secondary Source(s):'),
									/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.FormGroup, /* istanbul ignore next */{
											controlId: 'referenceWorks',
											className: 'form-group--referenceWorks' },

										/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListDnD.ListGroupDnD, /* istanbul ignore next */null,








											referenceWorks.map(function (referenceWork, i) {
												var _referenceWorkOptions = [];
												referenceWorkOptions.forEach(function (rW) {
													_referenceWorkOptions.push({
														value: rW.value,
														label: rW.label,
														slug: rW.slug,
														i: i });

												});

												return (
													/* istanbul ignore next */_react2.default.createElement(ListGroupItemDnD, /* istanbul ignore next */{
															key: referenceWork.referenceWorkId,
															index: i,
															className: 'form-subitem form-subitem--referenceWork',
															moveListGroupItem: /* istanbul ignore next */_this3.moveReferenceWorkBlock },

														/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
																className: 'reference-work-item' },

															/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
																	className: 'remove-reference-work-item',
																	onClick: /* istanbul ignore next */_this3.removeReferenceWorkBlock.bind( /* istanbul ignore next */_this3, i) },

																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_IconButton2.default, /* istanbul ignore next */{
																	iconClassName: 'mdi mdi-close',
																	style: {
																		padding: '0',
																		width: '32px',
																		height: '32px',
																		borderRadius: '100%',
																		border: '1px solid #eee',
																		color: '#666',
																		margin: '0 auto',
																		background: '#f6f6f6' } })),



															/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactSelect.Creatable, /* istanbul ignore next */{
																name: 'referenceWorks',
																id: 'referenceWorks',
																required: false,
																options: _referenceWorkOptions,
																value: /* istanbul ignore next */_this3.state.referenceWorks[i].referenceWorkId
																// onChange={this.onReferenceWorksValueChange.bind(this, referenceWork, i)}
																, onChange: /* istanbul ignore next */_this3.onReferenceWorksValueChange,
																newOptionCreator: /* istanbul ignore next */_this3.onNewOptionCreator,
																shouldKeyDownEventCreateNewOption: /* istanbul ignore next */_this3.shouldKeyDownEventCreateNewOption,
																isOptionUnique: /* istanbul ignore next */_this3.isOptionUnique,
																placeholder: 'Reference Work . . .' }),

															/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.FormGroup, /* istanbul ignore next */null,
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.ControlLabel, /* istanbul ignore next */null, /* istanbul ignore next */'Section Number: '),
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_lib.FormsyText, /* istanbul ignore next */{
																	name: /* istanbul ignore next */i + '_section' })),


															/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.FormGroup, /* istanbul ignore next */null,
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.ControlLabel, /* istanbul ignore next */null, /* istanbul ignore next */'Chapter Number: '),
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_lib.FormsyText, /* istanbul ignore next */{
																	name: /* istanbul ignore next */i + '_chapter' })),


															/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.FormGroup, /* istanbul ignore next */null,
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.ControlLabel, /* istanbul ignore next */null, /* istanbul ignore next */'Translation Number: '),
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_lib.FormsyText, /* istanbul ignore next */{
																	name: /* istanbul ignore next */i + '_translation' })),


															/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.FormGroup, /* istanbul ignore next */null,
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactBootstrap.ControlLabel, /* istanbul ignore next */null, /* istanbul ignore next */'Note Number: '),
																/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_lib.FormsyText, /* istanbul ignore next */{
																	name: /* istanbul ignore next */i + '_note' })))));





											})),

										/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
											label: 'Add Reference Work',
											onClick: this.addReferenceWorkBlock }))),




								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'comment-edit-action-button' },
									/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
										type: 'submit',
										label: 'Add comment',
										labelPosition: 'after',
										icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ className: 'mdi mdi-plus' }) }))))),







					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, /* istanbul ignore next */{
						className: 'add-comment-snackbar',
						open: this.state.snackbarOpen,
						message: this.state.snackbarMessage,
						autoHideDuration: 4000 })),



				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'inline-toolbar-wrap' },
					/* istanbul ignore next */_react2.default.createElement(InlineToolbar, /* istanbul ignore next */null))));



	} });


var AddCommentContainer = /* istanbul ignore next */(0, _reactMeteorData.createContainer)(function () {
	/* istanbul ignore next */_meteor.Meteor.subscribe('keywords.all', { tenantId: /* istanbul ignore next */_session.Session.get('tenantId') });
	var keywordsOptions = [];
	var keywords = /* istanbul ignore next */_keywords2.default.find({ type: 'word' }).fetch();
	keywords.forEach(function (keyword) {
		keywordsOptions.push({
			value: keyword.title,
			label: keyword.title,
			slug: keyword.slug });

	});

	var keyideasOptions = [];
	var keyideas = /* istanbul ignore next */_keywords2.default.find({ type: 'idea' }).fetch();
	keyideas.forEach(function (keyidea) {
		keyideasOptions.push({
			value: keyidea.title,
			label: keyidea.title,
			slug: keyidea.slug });

	});

	/* istanbul ignore next */_meteor.Meteor.subscribe('referenceWorks', /* istanbul ignore next */_session.Session.get('tenantId'));
	var referenceWorks = /* istanbul ignore next */_referenceWorks2.default.find().fetch();
	var referenceWorkOptions = [];
	referenceWorks.forEach(function (referenceWork) {
		referenceWorkOptions.push({
			value: referenceWork._id,
			label: referenceWork.title,
			slug: referenceWork.slug });

	});

	/* istanbul ignore next */_meteor.Meteor.subscribe('commenters', /* istanbul ignore next */_session.Session.get('tenantId'));
	var commentersOptions = [];
	var commenters = [];
	if ( /* istanbul ignore next */_meteor.Meteor.user() && /* istanbul ignore next */_meteor.Meteor.user().canEditCommenters) {
		commenters = /* istanbul ignore next */_commenters2.default.find({ _id: { $in: /* istanbul ignore next */_meteor.Meteor.user().canEditCommenters } }).fetch();
	}
	commenters.forEach(function (commenter) {
		commentersOptions.push({
			value: commenter._id,
			label: commenter.name });

	});

	return {
		keywordsOptions: keywordsOptions,
		keyideasOptions: keyideasOptions,
		referenceWorkOptions: referenceWorkOptions,
		commentersOptions: commentersOptions };


}, AddComment); /* istanbul ignore next */exports.default =

AddCommentContainer;