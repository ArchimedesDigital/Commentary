/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');
var /* istanbul ignore next */_session = require('meteor/session');
var /* istanbul ignore next */_lib = require('react-masonry-component/lib'); /* istanbul ignore next */var _lib2 = _interopRequireDefault(_lib);


var /* istanbul ignore next */_works = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/works'); /* istanbul ignore next */var _works2 = _interopRequireDefault(_works);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var BookshelfList = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'BookshelfList',
	propTypes: {
		works: /* istanbul ignore next */_react2.default.PropTypes.array }, /* istanbul ignore next */


	render: function render() {
		var masonryOptions = {
			isFitWidth: true,
			transitionDuration: 300 }; /* istanbul ignore next */var


		works = this.props.works;

		if (!works) {
			return null;
		}

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'works-list works-list--bookshelf' },
				works.length ?
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_lib2.default, /* istanbul ignore next */{
						options: masonryOptions,
						className: 'works-container works-container--grid row' },

					works.map(function (work, i) /* istanbul ignore next */{return (
							/* istanbul ignore next */_react2.default.createElement(WorkTeaser, /* istanbul ignore next */{
								key: i,
								work: work }));})) :




				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */null,
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: 'no-results no-results--bookshelf' }, /* istanbul ignore next */'You do not have any works saved on your bookshelf yet. ',
						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ href: '/browse' }, /* istanbul ignore next */'Add one by browsing the corpora.')))));





	} }); // api



var BookshelfListContainer = /* istanbul ignore next */(0, _reactMeteorData.createContainer)(function () {
	var query = {};
	var works = [];

	var shelfList = /* istanbul ignore next */_meteor.Meteor.users.findOne({
		_id: /* istanbul ignore next */_meteor.Meteor.userId() },
	{
		fields: {
			worksShelf: 1 } });



	if (shelfList && 'worksShelf' in shelfList) {
		query._id = {
			$in: [] };

		shelfList.worksShelf.forEach(function (workId) {
			query._id.$in.push(new /* istanbul ignore next */_meteor.Meteor.Collection.ObjectID(workId));
		});

		var handle = /* istanbul ignore next */_meteor.Meteor.subscribe('works', query, 0, 100);
		if (handle.ready()) {
			works = /* istanbul ignore next */_works2.default.find(query,
			{
				sort: {
					english_tile: 1 } }).


			fetch();

			works.forEach(function (work, i) {
				works[i].authors = Authors.find({
					_id: {
						$in: work.authors } }).

				fetch();
			});
		}
	}

	works.sort(function (a, b) {
		if (a.authors[0].english_name > b.authors[0].english_name) {
			return 1;
		} else if (b.authors[0].english_name > a.authors[0].english_name) {
			return -1;
		}
		return 0;
	});

	return {
		works: works };

}, BookshelfList); /* istanbul ignore next */exports.default =

BookshelfList;