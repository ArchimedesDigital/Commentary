/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_meteor = require('meteor/meteor');
var /* istanbul ignore next */_session = require('meteor/session');
var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');


var /* istanbul ignore next */_BackgroundImageHolder = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/shared/BackgroundImageHolder'); /* istanbul ignore next */var _BackgroundImageHolder2 = _interopRequireDefault(_BackgroundImageHolder);
var /* istanbul ignore next */_ReferenceWorksList = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/referenceWorks/ReferenceWorksList'); /* istanbul ignore next */var _ReferenceWorksList2 = _interopRequireDefault(_ReferenceWorksList);
var /* istanbul ignore next */_CommentsRecent = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/comments/CommentsRecent'); /* istanbul ignore next */var _CommentsRecent2 = _interopRequireDefault(_CommentsRecent);
var /* istanbul ignore next */_AvatarIcon = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/avatar/AvatarIcon'); /* istanbul ignore next */var _AvatarIcon2 = _interopRequireDefault(_AvatarIcon);
var /* istanbul ignore next */_LoadingPage = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/loading/LoadingPage'); /* istanbul ignore next */var _LoadingPage2 = _interopRequireDefault(_LoadingPage);


var /* istanbul ignore next */_settings = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/settings'); /* istanbul ignore next */var _settings2 = _interopRequireDefault(_settings);
var /* istanbul ignore next */_referenceWorks = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/referenceWorks'); /* istanbul ignore next */var _referenceWorks2 = _interopRequireDefault(_referenceWorks);
var /* istanbul ignore next */_commenters = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/commenters'); /* istanbul ignore next */var _commenters2 = _interopRequireDefault(_commenters);


var /* istanbul ignore next */_utils = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/utils'); /* istanbul ignore next */var _utils2 = _interopRequireDefault(_utils);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // api


var ReferenceWorkDetail = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'ReferenceWorkDetail',

	propTypes: {
		slug: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
		referenceWork: /* istanbul ignore next */_react2.default.PropTypes.object,
		settings: /* istanbul ignore next */_react2.default.PropTypes.object,
		commenters: /* istanbul ignore next */_react2.default.PropTypes.array }, /* istanbul ignore next */


	createMarkup: function createMarkup() {
		var __html = '';
		if (this.props.referenceWork) {
			__html += '<p>';
			__html += this.props.referenceWork.description.replace('\n', '</p><p>');
			__html += '</p>';
		}
		return {
			__html: __html };

	}, /* istanbul ignore next */

	render: function render() {/* istanbul ignore next */var _props =
		this.props,referenceWork = _props.referenceWork,commenters = _props.commenters,settings = _props.settings;
		var commentersNames = [];
		var commentersTitle = '';

		if (commenters) {
			commenters.forEach(function (commenter) {
				commentersNames.push(commenter.name);
			});
			commentersTitle = commenters.join(', ');
		}

		if (!referenceWork || !settings) {
			// TODO: Handle not found
			return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_LoadingPage2.default, /* istanbul ignore next */null));
		}

		/* istanbul ignore next */_utils2.default.setTitle( /* istanbul ignore next */referenceWork.title + ' ' + commentersTitle + ' | ' + settings.title);
		/* istanbul ignore next */_utils2.default.setDescription( /* istanbul ignore next */_utils2.default.trunc(referenceWork.description, 150));
		/* istanbul ignore next */_utils2.default.setMetaImage( /* istanbul ignore next */location.origin + '/images/apotheosis_homer.jpg');

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'page reference-works-page reference-works-detail-page' },
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'content primary' },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ className: 'block header header-page cover parallax' },
						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_BackgroundImageHolder2.default, /* istanbul ignore next */{
							imgSrc: '/images/apotheosis_homer.jpg' }),


						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'container v-align-transform' },
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'grid inner' },
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'center-content' },
									/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'page-title-wrap' },
										/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h2', /* istanbul ignore next */{ className: 'page-title ' }, referenceWork.title),
										referenceWork.link ?
										/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{
												className: 'read-online-link',
												href: referenceWork.link,
												target: '_blank',
												rel: 'noopener noreferrer' }, /* istanbul ignore next */'Read Online ',

											/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'i', /* istanbul ignore next */{ className: 'mdi mdi-open-in-new' })) :

										''))))),






					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ className: 'page-content' },

						commenters && commenters.length ?
						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'page-byline' },
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h3', /* istanbul ignore next */null, /* istanbul ignore next */'By ', commenters.map(function (commenter, i) {
									var ending = '';

									if (i < commenters.length - 2) {
										ending = ', ';
									} else if (i < commenters.length - 1) {
										ending = ' and ';
									}

									return (
										/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{
												key: i },

											/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{
													href: /* istanbul ignore next */'/commenters/' + commenter.slug },

												commenter.name),
											ending));


								}))) :


						'',

						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
							dangerouslySetInnerHTML: this.createMarkup() })),



					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentsRecent2.default, /* istanbul ignore next */null))));



	} }); // lib
// components


var ReferenceWorkDetailContainer = /* istanbul ignore next */(0, _reactMeteorData.createContainer)(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var slug = _ref.slug;
	// SUBSCRIPTIONS:
	/* istanbul ignore next */_meteor.Meteor.subscribe('referenceWorks.slug', slug, /* istanbul ignore next */_session.Session.get('tenantId'));
	/* istanbul ignore next */_meteor.Meteor.subscribe('commenters', /* istanbul ignore next */_session.Session.get('tenantId'));
	var settingsHandle = /* istanbul ignore next */_meteor.Meteor.subscribe('settings.tenant', /* istanbul ignore next */_session.Session.get('tenantId'));

	// FETCH DATA:
	var query = {
		slug: slug };

	var referenceWork = /* istanbul ignore next */_referenceWorks2.default.findOne(query);

	var commenters = [];
	if (referenceWork && 'authors' in referenceWork) {
		commenters = /* istanbul ignore next */_commenters2.default.find({
			_id: { $in: referenceWork.authors } },
		{ sort: { name: 1 } }).fetch();
	}

	return {
		referenceWork: referenceWork,
		commenters: commenters,
		settings: settingsHandle.ready() ? /* istanbul ignore next */_settings2.default.findOne() : { title: '' } };

}, ReferenceWorkDetail); /* istanbul ignore next */exports.default =

ReferenceWorkDetailContainer;