/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_diff = require('diff'); /* istanbul ignore next */var _diff2 = _interopRequireDefault(_diff);
var /* istanbul ignore next */_colors = require('material-ui/styles/colors');

var /* istanbul ignore next */_CommentBodyText = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/comments/CommentBodyText'); /* istanbul ignore next */var _CommentBodyText2 = _interopRequireDefault(_CommentBodyText);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/*
                                                                                                                                                                                                                                                                                                                                                 	helpers
                                                                                                                                                                                                                                                                                                                                                 */

var stripHTMLFromText = function stripHTMLFromText(htmlText) {
	var tempElem = document.createElement('div');
	tempElem.innerHTML = htmlText;
	return tempElem.textContent || tempElem.innerText || '';
};

var getRevisionDiff = function getRevisionDiff(comment, revisionIndex) {
	// build the diff view and return a DOM node
	var baseRevision = comment.revisions[revisionIndex];
	var newRevision = comment.revisions[comment.revisions.length - 1];

	var revisionDiff = document.createElement('comment-diff');

	var baseRevisionText = stripHTMLFromText(baseRevision.text);
	var newRevisionText = stripHTMLFromText(newRevision.text);

	var diff = /* istanbul ignore next */_diff2.default.diffWordsWithSpace(baseRevisionText, newRevisionText);

	diff.forEach(function (part) {
		// green for additions, red for deletions
		var color = /* istanbul ignore next */_colors.black;
		var background = /* istanbul ignore next */_colors.fullWhite;
		var span = document.createElement('span');

		if (part.added) {
			color = /* istanbul ignore next */_colors.blue800;
			background = /* istanbul ignore next */_colors.blue50;
		} else if (part.removed) {
			color = /* istanbul ignore next */_colors.red800;
			background = /* istanbul ignore next */_colors.red50;
			span.style.textDecoration = 'line-through';
		}

		span.style.color = color;
		span.style.background = background;
		span.style.padding = '0px';

		span.appendChild(document.
		createTextNode(part.value));
		revisionDiff.appendChild(span);
	});

	return revisionDiff;
};


/*
   	BEGIN CommentBody
   */
var CommentBody = function CommentBody(props) {

	if (props.revisionIndex === props.comment.revisions.length - 1) {
		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentBodyText2.default, /* istanbul ignore next */{
				text: props.comment.revisions[props.revisionIndex].text,
				onTextClick: props.onTextClick,
				createRevisionMarkup: /* istanbul ignore next */true }));


	}

	return (
		/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentBodyText2.default, /* istanbul ignore next */{
			text: getRevisionDiff(props.comment, props.revisionIndex).innerHTML }));


};
CommentBody.propTypes = {
	comment: /* istanbul ignore next */_react2.default.PropTypes.shape({
		revisions: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({
			text: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired })) }).

	isRequired,
	revisionIndex: /* istanbul ignore next */_react2.default.PropTypes.number.isRequired,
	onTextClick: /* istanbul ignore next */_react2.default.PropTypes.func };

CommentBody.defaultProps = {
	onTextClick: null };

/*
                      	END CommentBody
                      */ /* istanbul ignore next */exports.default =


CommentBody;