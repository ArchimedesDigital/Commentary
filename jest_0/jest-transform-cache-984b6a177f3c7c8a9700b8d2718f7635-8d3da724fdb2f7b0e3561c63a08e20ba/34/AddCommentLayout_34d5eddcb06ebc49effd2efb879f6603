/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};









// components:







// lib


// api
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);var /* istanbul ignore next */_meteor = require('meteor/meteor');var /* istanbul ignore next */_session = require('meteor/session');var /* istanbul ignore next */_alanningRoles = require('meteor/alanning:roles');var /* istanbul ignore next */_reactMeteorData = require('meteor/react-meteor-data');var /* istanbul ignore next */_slugify = require('slugify'); /* istanbul ignore next */var _slugify2 = _interopRequireDefault(_slugify);var /* istanbul ignore next */_reactCookie = require('react-cookie'); /* istanbul ignore next */var _reactCookie2 = _interopRequireDefault(_reactCookie);var /* istanbul ignore next */_MuiThemeProvider = require('material-ui/styles/MuiThemeProvider'); /* istanbul ignore next */var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);var /* istanbul ignore next */_getMuiTheme = require('material-ui/styles/getMuiTheme'); /* istanbul ignore next */var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);var /* istanbul ignore next */_Header = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/layouts/header/Header'); /* istanbul ignore next */var _Header2 = _interopRequireDefault(_Header);var /* istanbul ignore next */_FilterWidget = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/commentary/FilterWidget'); /* istanbul ignore next */var _FilterWidget2 = _interopRequireDefault(_FilterWidget);var /* istanbul ignore next */_Spinner = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/loading/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);var /* istanbul ignore next */_CommentLemmaSelect = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/editor/addComment/CommentLemmaSelect'); /* istanbul ignore next */var _CommentLemmaSelect2 = _interopRequireDefault(_CommentLemmaSelect);var /* istanbul ignore next */_AddComment = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/components/editor/addComment/AddComment'); /* istanbul ignore next */var _AddComment2 = _interopRequireDefault(_AddComment);var /* istanbul ignore next */_ContextPanel = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/ui/layouts/commentary/ContextPanel'); /* istanbul ignore next */var _ContextPanel2 = _interopRequireDefault(_ContextPanel);var /* istanbul ignore next */_muiTheme = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/lib/muiTheme'); /* istanbul ignore next */var _muiTheme2 = _interopRequireDefault(_muiTheme);var /* istanbul ignore next */_commenters = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/commenters'); /* istanbul ignore next */var _commenters2 = _interopRequireDefault(_commenters);
var /* istanbul ignore next */_keywords = require('/Users/Tyler/Desktop/AHCIP/ahcip/imports/api/collections/keywords'); /* istanbul ignore next */var _keywords2 = _interopRequireDefault(_keywords);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


var AddCommentLayout = /* istanbul ignore next */_react2.default.createClass({ /* istanbul ignore next */displayName: 'AddCommentLayout',

	propTypes: {
		ready: /* istanbul ignore next */_react2.default.PropTypes.bool,
		isTest: /* istanbul ignore next */_react2.default.PropTypes.bool }, /* istanbul ignore next */


	getInitialState: function getInitialState() {
		return {
			filters: [],
			selectedLineFrom: 0,
			selectedLineTo: 0,
			contextReaderOpen: true,
			loading: false };

	}, /* istanbul ignore next */

	componentWillUpdate: function componentWillUpdate() {
		this.handlePermissions();
	}, /* istanbul ignore next */

	handlePermissions: function handlePermissions() {
		if ( /* istanbul ignore next */_alanningRoles.Roles.subscription.ready()) {
			if (! /* istanbul ignore next */_alanningRoles.Roles.userIsInRole( /* istanbul ignore next */_meteor.Meteor.userId(), ['editor', 'admin', 'commenter'])) {
				FlowRouter.go('/');
			}
		}
	}, /* istanbul ignore next */

	// --- BEGNI LINE SELECTION --- //

	updateSelectedLines: function updateSelectedLines(selectedLineFrom, selectedLineTo) {
		if (selectedLineFrom === null) {
			this.setState({
				selectedLineTo: selectedLineTo });

		} else if (selectedLineTo === null) {
			this.setState({
				selectedLineFrom: selectedLineFrom });

		} else if (selectedLineTo != null && selectedLineTo != null) {
			this.setState({
				selectedLineFrom: selectedLineFrom,
				selectedLineTo: selectedLineTo });

		} else {
			// do nothing
		}
	}, /* istanbul ignore next */

	toggleSearchTerm: function toggleSearchTerm(key, value) {
		var filters = this.state.filters;
		var keyIsInFilter = false;
		var valueIsInFilter = false;
		var filterValueToRemove = /* istanbul ignore next */void 0;
		var filterToRemove = /* istanbul ignore next */void 0;

		filters.forEach(function (filter, i) {
			if (filter.key === key) {
				keyIsInFilter = true;

				filter.values.forEach(function (filterValue, j) {
					if (filterValue._id === value._id) {
						valueIsInFilter = true;
						filterValueToRemove = j;
					}
				});

				if (valueIsInFilter) {
					filter.values.splice(filterValueToRemove, 1);
					if (filter.values.length === 0) {
						filterToRemove = i;
					}
				} else if (key === 'works') {
					filters[i].values = [value];
				} else {
					filters[i].values.push(value);
				}
			}
		});


		if (typeof filterToRemove !== 'undefined') {
			filters.splice(filterToRemove, 1);
		}

		if (!keyIsInFilter) {
			filters.push({
				key: key,
				values: [value] });

		}

		this.setState({
			filters: filters,
			skip: 0 });

	}, /* istanbul ignore next */

	// --- END LINE SELECTION --- //

	// --- BEGNI ADD COMMENT --- //

	addComment: function addComment(formData, textValue, textRawValue) {/* istanbul ignore next */var _this = this;
		this.setState({
			loading: true });


		// get data for comment:
		var work = this.getWork();
		var subwork = this.getSubwork();
		var lineLetter = this.getLineLetter();
		var referenceWorks = formData.referenceWorks;
		var commenter = this.getCommenter(formData);
		var selectedLineTo = this.getSelectedLineTo();
		var token = /* istanbul ignore next */_reactCookie2.default.load('loginToken');

		// need to add new keywords first, so keyword id can be added to comment:
		this.addNewKeywordsAndIdeas(formData.keywordsValue, formData.keyideasValue, function () {

			// get keywords after they were created:
			var keywords = /* istanbul ignore next */_this.getKeywords(formData);
			var revisionId = new /* istanbul ignore next */_meteor.Meteor.Collection.ObjectID();

			// create comment object to be inserted:
			var comment = {
				work: {
					title: work.title,
					slug: work.slug,
					order: work.order },

				subwork: {
					title: subwork.title,
					n: subwork.n },

				lineFrom: /* istanbul ignore next */_this.state.selectedLineFrom,
				lineTo: selectedLineTo,
				lineLetter: lineLetter,
				nLines: selectedLineTo - /* istanbul ignore next */_this.state.selectedLineFrom + 1,
				revisions: [{
					_id: revisionId.valueOf(),
					title: formData.titleValue,
					text: textValue,
					textRaw: textRawValue,
					created: referenceWorks ? referenceWorks.date : new Date(),
					slug: /* istanbul ignore next */(0, _slugify2.default)(formData.titleValue) }],

				commenters: commenter ? [{
					_id: commenter._id,
					name: commenter.name,
					slug: commenter.slug }] :
				[{}],
				keywords: keywords || [{}],
				referenceWorks: referenceWorks,
				tenantId: /* istanbul ignore next */_session.Session.get('tenantId'),
				created: new Date() };


			/* istanbul ignore next */_meteor.Meteor.call('comments.insert', token, comment, function (error, commentId) {
				FlowRouter.go('/commentary', {}, { _id: commentId });
			});
		});
	}, /* istanbul ignore next */

	matchKeywords: function matchKeywords(keywords) {
		var matchedKeywords = [];

		if (keywords) {
			keywords.forEach(function (keyword) {
				var keywordTitle = /* istanbul ignore next */void 0;
				if ( /* istanbul ignore next */(typeof keyword === 'undefined' ? 'undefined' : _typeof(keyword)) === 'object') {
					keywordTitle = keyword.label;
				} else {
					keywordTitle = keyword;
				}
				var foundKeyword = /* istanbul ignore next */_keywords2.default.findOne({
					title: keywordTitle });

				matchedKeywords.push(foundKeyword);
			});
		}

		return matchedKeywords;
	}, /* istanbul ignore next */

	addNewKeywordsAndIdeas: function addNewKeywordsAndIdeas(keywords, keyideas, next) {/* istanbul ignore next */var _this2 = this;
		this.addNewKeywords(keywords, 'word', function () {
			/* istanbul ignore next */_this2.addNewKeywords(keyideas, 'idea', function () /* istanbul ignore next */{return next();});
		});
	}, /* istanbul ignore next */

	addNewKeywords: function addNewKeywords(keywords, type, next) {
		// TODO should be handled server-side
		if (keywords) {
			var newKeywordArray = [];
			keywords.forEach(function (keyword) {
				var foundKeyword = /* istanbul ignore next */_keywords2.default.findOne({ slug: keyword.slug });
				if (!foundKeyword) {
					var newKeyword = {
						title: keyword.label,
						slug: /* istanbul ignore next */(0, _slugify2.default)(keyword.label),
						type: type,
						tenantId: /* istanbul ignore next */_session.Session.get('tenantId') };

					newKeywordArray.push(newKeyword);
				}
			});
			if (newKeywordArray.length > 0) {
				var token = /* istanbul ignore next */_reactCookie2.default.load('loginToken');
				return (/* istanbul ignore next */_meteor.Meteor.call('keywords.insert', token, newKeywordArray, function (err) {
						if (err) {
							console.log(err);
							return null;
						}
						return next();
					}));
			}
			return next();
		}
		return next();
	}, /* istanbul ignore next */

	getWork: function getWork() {
		var work = null;
		this.state.filters.forEach(function (filter) {
			if (filter.key === 'work') {
				work = values[0];
			}
		});
		if (!work) {
			work = {
				title: 'Iliad',
				slug: 'iliad',
				order: 1 };

		}
		return work;
	}, /* istanbul ignore next */

	getSubwork: function getSubwork() {
		var subwork = null;
		this.state.filters.forEach(function (filter) {
			if (filter.key === 'subwork') {
				subwork = values[0];
			}
		});
		if (!subwork) {
			subwork = {
				title: '1',
				n: 1 };

		}
		return subwork;
	}, /* istanbul ignore next */

	getLineLetter: function getLineLetter() {
		var lineLetter = '';
		if (this.state.selectedLineTo === 0 && this.state.selectedLineFrom > 0) {
			lineLetter = this.commentLemmaSelect.state ? his.commentLemmaSelect.state.lineLetterValue : null;
		}
		return lineLetter;
	}, /* istanbul ignore next */

	getReferenceWorks: function getReferenceWorks(formData) {
		var referenceWorks = null;
		if (formData.referenceWorksValue) {
			referenceWorks = ReferenceWorks.findOne({ _id: formData.referenceWorksValue.value });
		}
		return referenceWorks;
	}, /* istanbul ignore next */

	getCommenter: function getCommenter(formData) {
		var commenter = /* istanbul ignore next */_commenters2.default.findOne({
			_id: formData.commenterValue.value });

		return commenter;
	}, /* istanbul ignore next */

	getSelectedLineTo: function getSelectedLineTo() {
		var selectedLineTo = 0;
		if (this.state.selectedLineTo === 0) {
			selectedLineTo = this.state.selectedLineFrom;
		} else {
			selectedLineTo = this.state.selectedLineTo;
		}
		return selectedLineTo;
	}, /* istanbul ignore next */

	getKeywords: function getKeywords(formData) {
		var keywords = [];
		this.matchKeywords(formData.keywordsValue).forEach(function (matchedKeyword) {
			keywords.push(matchedKeyword);
		});
		this.matchKeywords(formData.keyideasValue).forEach(function (matchedKeyword) {
			keywords.push(matchedKeyword);
		});
		return keywords;
	}, /* istanbul ignore next */

	// --- END ADD COMMENT --- //

	closeContextReader: function closeContextReader() {
		this.setState({
			contextReaderOpen: false });

	}, /* istanbul ignore next */

	openContextReader: function openContextReader() {
		this.setState({
			contextReaderOpen: true });

	}, /* istanbul ignore next */

	lineLetterUpdate: function lineLetterUpdate(value) {
		this.setState({
			lineLetter: value });

	}, /* istanbul ignore next */

	handleChangeLineN: function handleChangeLineN(e) {
		var filters = this.state.filters;

		if (e.from > 1) {
			var lineFromInFilters = false;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineFrom') {
					filters[i].values = [e.from];
					lineFromInFilters = true;
				}
			});

			if (!lineFromInFilters) {
				filters.push({
					key: 'lineFrom',
					values: [e.from] });

			}
		} else {
			var filterToRemove = /* istanbul ignore next */void 0;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineFrom') {
					filterToRemove = i;
				}
			});

			if (typeof filterToRemove !== 'undefined') {
				filters.splice(filterToRemove, 1);
			}
		}

		if (e.to < 2100) {
			var lineToInFilters = false;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineTo') {
					filters[i].values = [e.to];
					lineToInFilters = true;
				}
			});

			if (!lineToInFilters) {
				filters.push({
					key: 'lineTo',
					values: [e.to] });

			}
		} else {
			var _filterToRemove = /* istanbul ignore next */void 0;

			filters.forEach(function (filter, i) {
				if (filter.key === 'lineTo') {
					_filterToRemove = i;
				}
			});

			if (typeof _filterToRemove !== 'undefined') {
				filters.splice(_filterToRemove, 1);
			}
		}


		this.setState({
			filters: filters });

	}, /* istanbul ignore next */

	render: function render() {/* istanbul ignore next */var _this3 = this;var
		isTest = this.props.isTest; /* istanbul ignore next */var
		filters = this.state.filters;
		var work = /* istanbul ignore next */void 0;
		var subwork = /* istanbul ignore next */void 0;
		var lineFrom = /* istanbul ignore next */void 0;
		var lineTo = /* istanbul ignore next */void 0;

		filters.forEach(function (filter) {
			if (filter.key === 'works') {
				work = filter.values[0];
			} else if (filter.key === 'subworks') {
				subwork = filter.values[0];
			} else if (filter.key === 'lineTo') {
				lineTo = filter.values[0];
			} else if (filter.key === 'lineFrom') {
				lineFrom = filter.values[0];
			}
		});

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MuiThemeProvider2.default, /* istanbul ignore next */{ muiTheme: /* istanbul ignore next */(0, _getMuiTheme2.default)( /* istanbul ignore next */_muiTheme2.default) },
				!this.state.loading ?
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'chs-layout chs-editor-layout add-comment-layout' },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Header2.default, /* istanbul ignore next */{
						toggleSearchTerm: this.toggleSearchTerm,
						handleChangeLineN: this.handleChangeLineN,
						filters: filters,
						initialSearchEnabled: /* istanbul ignore next */true,
						addCommentPage: /* istanbul ignore next */true }),


					!isTest ?
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'main', /* istanbul ignore next */null,
						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'commentary-comments' },
							/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'comment-group' },
								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CommentLemmaSelect2.default, /* istanbul ignore next */{
									ref: function /* istanbul ignore next */ref(component) {/* istanbul ignore next */_this3.commentLemmaSelect = component;},
									selectedLineFrom: this.state.selectedLineFrom,
									selectedLineTo: this.state.selectedLineTo,
									workSlug: work ? work.slug : 'iliad',
									subworkN: subwork ? subwork.n : 1 }),


								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_AddComment2.default, /* istanbul ignore next */{
									selectedLineFrom: this.state.selectedLineFrom,
									submitForm: this.addComment }),


								/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ContextPanel2.default, /* istanbul ignore next */{
									open: this.state.contextReaderOpen,
									workSlug: work ? work.slug : 'iliad',
									subworkN: subwork ? subwork.n : 1,
									lineFrom: lineFrom || 1,
									selectedLineFrom: this.state.selectedLineFrom,
									selectedLineTo: this.state.selectedLineTo,
									updateSelectedLines: this.updateSelectedLines,
									editor: /* istanbul ignore next */true }))),




						/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FilterWidget2.default, /* istanbul ignore next */{
							filters: filters,
							toggleSearchTerm: this.toggleSearchTerm })) :


					'') :


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ fullPage: /* istanbul ignore next */true })));



	} });



var AddCommentLayoutContainer = (function () {
	var ready = /* istanbul ignore next */_alanningRoles.Roles.subscription.ready();

	/* istanbul ignore next */_meteor.Meteor.subscribe('keywords.all', { tenantId: /* istanbul ignore next */_session.Session.get('tenantId') });
	var keywords = /* istanbul ignore next */_keywords2.default.find().fetch();

	return {
		ready: ready,
		keywords: keywords };

}, AddCommentLayout); /* istanbul ignore next */exports.default =

AddCommentLayoutContainer;